function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}function navImg(){getItems=document.getElementsByClassName("feature-slider_control-nav-item");for(var t=0;t<getItems.length;t++)$(getItems[t]).addClass("feature-slider_control-nav-img"+t);return getItems}function openNav(){$(".offcanvas__menu").css("width","320px"),$(".offcanvas__open").attr("onclick","closeNav()")}function closeNav(){$(".offcanvas__menu").css("width","0"),$(".offcanvas__open").attr("onclick","openNav()")}!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=!!t&&"length"in t&&t.length,n=it.type(t);return"function"!==n&&!it.isWindow(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function i(t,e,n){if(it.isFunction(e))return it.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return it.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(ht.test(e))return it.filter(e,t,n);e=it.filter(e,t)}return it.grep(t,function(t){return Z.call(e,t)>-1!==n})}function o(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function r(t){var e={};return it.each(t.match(yt)||[],function(t,n){e[n]=!0}),e}function a(){X.removeEventListener("DOMContentLoaded",a),t.removeEventListener("load",a),it.ready()}function s(){this.expando=it.expando+s.uid++}function l(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(At,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:_t.test(n)?it.parseJSON(n):n)}catch(t){}St.set(t,e,n)}else n=void 0;return n}function c(t,e,n,i){var o,r=1,a=20,s=i?function(){return i.cur()}:function(){return it.css(t,e,"")},l=s(),c=n&&n[3]||(it.cssNumber[e]?"":"px"),u=(it.cssNumber[e]||"px"!==c&&+l)&&Et.exec(it.css(t,e));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{u/=r=r||".5",it.style(t,e,u+c)}while(r!==(r=s()/l)&&1!==r&&--a)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}function u(t,e){var n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&it.nodeName(t,e)?it.merge([t],n):n}function d(t,e){for(var n=0,i=t.length;n<i;n++)Ct.set(t[n],"globalEval",!e||Ct.get(e[n],"globalEval"))}function f(t,e,n,i,o){for(var r,a,s,l,c,f,h=e.createDocumentFragment(),p=[],g=0,m=t.length;g<m;g++)if((r=t[g])||0===r)if("object"===it.type(r))it.merge(p,r.nodeType?[r]:r);else if(Rt.test(r)){for(a=a||h.appendChild(e.createElement("div")),s=(Nt.exec(r)||["",""])[1].toLowerCase(),l=Pt[s]||Pt._default,a.innerHTML=l[1]+it.htmlPrefilter(r)+l[2],f=l[0];f--;)a=a.lastChild;it.merge(p,a.childNodes),(a=h.firstChild).textContent=""}else p.push(e.createTextNode(r));for(h.textContent="",g=0;r=p[g++];)if(i&&it.inArray(r,i)>-1)o&&o.push(r);else if(c=it.contains(r.ownerDocument,r),a=u(h.appendChild(r),"script"),c&&d(a),n)for(f=0;r=a[f++];)kt.test(r.type||"")&&n.push(r);return h}function h(){return!0}function p(){return!1}function g(){try{return X.activeElement}catch(t){}}function m(t,e,n,i,o,r){var a,s;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(s in e)m(t,s,n,i,e[s],r);return t}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=p;else if(!o)return t;return 1===r&&(a=o,(o=function(t){return it().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=it.guid++)),t.each(function(){it.event.add(this,e,o,i,n)})}function v(t,e){return it.nodeName(t,"table")&&it.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function y(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function b(t){var e=Ht.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function w(t,e){var n,i,o,r,a,s,l,c;if(1===e.nodeType){if(Ct.hasData(t)&&(r=Ct.access(t),a=Ct.set(e,r),c=r.events)){delete a.handle,a.events={};for(o in c)for(n=0,i=c[o].length;n<i;n++)it.event.add(e,o,c[o][n])}St.hasData(t)&&(s=St.access(t),l=it.extend({},s),St.set(e,l))}}function x(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Ot.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function C(t,e,n,i){e=K.apply([],e);var o,r,a,s,l,c,d=0,h=t.length,p=h-1,g=e[0],m=it.isFunction(g);if(m||h>1&&"string"==typeof g&&!nt.checkClone&&jt.test(g))return t.each(function(o){var r=t.eq(o);m&&(e[0]=g.call(this,o,r.html())),C(r,e,n,i)});if(h&&(o=f(e,t[0].ownerDocument,!1,t,i),r=o.firstChild,1===o.childNodes.length&&(o=r),r||i)){for(s=(a=it.map(u(o,"script"),y)).length;d<h;d++)l=o,d!==p&&(l=it.clone(l,!0,!0),s&&it.merge(a,u(l,"script"))),n.call(t[d],l,d);if(s)for(c=a[a.length-1].ownerDocument,it.map(a,b),d=0;d<s;d++)l=a[d],kt.test(l.type||"")&&!Ct.access(l,"globalEval")&&it.contains(c,l)&&(l.src?it._evalUrl&&it._evalUrl(l.src):it.globalEval(l.textContent.replace(Wt,"")))}return t}function S(t,e,n){for(var i,o=e?it.filter(e,t):t,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||it.cleanData(u(i)),i.parentNode&&(n&&it.contains(i.ownerDocument,i)&&d(u(i,"script")),i.parentNode.removeChild(i));return t}function _(t,e){var n=it(e.createElement(t)).appendTo(e.body),i=it.css(n[0],"display");return n.detach(),i}function A(t){var e=X,n=qt[t];return n||("none"!==(n=_(t,e))&&n||((e=(Ut=(Ut||it("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement))[0].contentDocument).write(),e.close(),n=_(t,e),Ut.detach()),qt[t]=n),n}function T(t,e,n){var i,o,r,a,s=t.style;return n=n||Vt(t),""!==(a=n?n.getPropertyValue(e)||n[e]:void 0)&&void 0!==a||it.contains(t.ownerDocument,t)||(a=it.style(t,e)),n&&!nt.pixelMarginRight()&&zt.test(a)&&Gt.test(e)&&(i=s.width,o=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=o,s.maxWidth=r),void 0!==a?a+"":a}function E(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}function I(t){if(t in te)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Jt.length;n--;)if((t=Jt[n]+e)in te)return t}function D(t,e,n){var i=Et.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function O(t,e,n,i,o){for(var r=n===(i?"border":"content")?4:"width"===e?1:0,a=0;r<4;r+=2)"margin"===n&&(a+=it.css(t,n+It[r],!0,o)),i?("content"===n&&(a-=it.css(t,"padding"+It[r],!0,o)),"margin"!==n&&(a-=it.css(t,"border"+It[r]+"Width",!0,o))):(a+=it.css(t,"padding"+It[r],!0,o),"padding"!==n&&(a+=it.css(t,"border"+It[r]+"Width",!0,o)));return a}function N(t,e,n){var i=!0,o="width"===e?t.offsetWidth:t.offsetHeight,r=Vt(t),a="border-box"===it.css(t,"boxSizing",!1,r);if(o<=0||null==o){if(((o=T(t,e,r))<0||null==o)&&(o=t.style[e]),zt.test(o))return o;i=a&&(nt.boxSizingReliable()||o===t.style[e]),o=parseFloat(o)||0}return o+O(t,e,n||(a?"border":"content"),i,r)+"px"}function k(t,e){for(var n,i,o,r=[],a=0,s=t.length;a<s;a++)(i=t[a]).style&&(r[a]=Ct.get(i,"olddisplay"),n=i.style.display,e?(r[a]||"none"!==n||(i.style.display=""),""===i.style.display&&Dt(i)&&(r[a]=Ct.access(i,"olddisplay",A(i.nodeName)))):(o=Dt(i),"none"===n&&o||Ct.set(i,"olddisplay",o?n:it.css(i,"display"))));for(a=0;a<s;a++)(i=t[a]).style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?r[a]||"":"none"));return t}function P(t,e,n,i,o){return new P.prototype.init(t,e,n,i,o)}function R(){return t.setTimeout(function(){ee=void 0}),ee=it.now()}function B(t,e){var n,i=0,o={height:t};for(e=e?1:0;i<4;i+=2-e)o["margin"+(n=It[i])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function $(t,e,n){for(var i,o=(L.tweeners[e]||[]).concat(L.tweeners["*"]),r=0,a=o.length;r<a;r++)if(i=o[r].call(n,e,t))return i}function F(t,e){var n,i,o,r,a;for(n in t)if(i=it.camelCase(n),o=e[i],r=t[n],it.isArray(r)&&(o=r[1],r=t[n]=r[0]),n!==i&&(t[i]=r,delete t[n]),(a=it.cssHooks[i])&&"expand"in a){r=a.expand(r),delete t[i];for(n in r)n in t||(t[n]=r[n],e[n]=o)}else e[i]=o}function L(t,e,n){var i,o,r=0,a=L.prefilters.length,s=it.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=ee||R(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),r=0,a=c.tweens.length;r<a;r++)c.tweens[r].run(i);return s.notifyWith(t,[c,i,n]),i<1&&a?n:(s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:it.extend({},e),opts:it.extend(!0,{specialEasing:{},easing:it.easing._default},n),originalProperties:e,originalOptions:n,startTime:ee||R(),duration:n.duration,tweens:[],createTween:function(e,n){var i=it.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),u=c.props;for(F(u,c.opts.specialEasing);r<a;r++)if(i=L.prefilters[r].call(c,t,u,c.opts))return it.isFunction(i.stop)&&(it._queueHooks(c.elem,c.opts.queue).stop=it.proxy(i.stop,i)),i;return it.map(u,$,c),it.isFunction(c.opts.start)&&c.opts.start.call(t,c),it.fx.timer(it.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function M(t){return t.getAttribute&&t.getAttribute("class")||""}function j(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,o=0,r=e.toLowerCase().match(yt)||[];if(it.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function H(t,e,n,i){function o(s){var l;return r[s]=!0,it.each(t[s]||[],function(t,s){var c=s(e,n,i);return"string"!=typeof c||a||r[c]?a?!(l=c):void 0:(e.dataTypes.unshift(c),o(c),!1)}),l}var r={},a=t===Ce;return o(e.dataTypes[0])||!r["*"]&&o("*")}function W(t,e){var n,i,o=it.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:i||(i={}))[n]=e[n]);return i&&it.extend(!0,t,i),t}function U(t,e,n){for(var i,o,r,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}a||(a=o)}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}function q(t,e,n,i){var o,r,a,s,l,c={},u=t.dataTypes.slice();if(u[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(r=u.shift();r;)if(t.responseFields[r]&&(n[t.responseFields[r]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=c[l+" "+r]||c["* "+r]))for(o in c)if((s=o.split(" "))[1]===r&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(r=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}function G(t,e,n,i){var o;if(it.isArray(e))it.each(e,function(e,o){n||Te.test(t)?i(t,o):G(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,i)});else if(n||"object"!==it.type(e))i(t,e);else for(o in e)G(t+"["+o+"]",e[o],n,i)}function z(t){return it.isWindow(t)?t:9===t.nodeType&&t.defaultView}var V=[],X=t.document,Y=V.slice,K=V.concat,Q=V.push,Z=V.indexOf,J={},tt=J.toString,et=J.hasOwnProperty,nt={},it=function(t,e){return new it.fn.init(t,e)},ot=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,rt=/^-ms-/,at=/-([\da-z])/gi,st=function(t,e){return e.toUpperCase()};it.fn=it.prototype={jquery:"2.2.4",constructor:it,selector:"",length:0,toArray:function(){return Y.call(this)},get:function(t){return null!=t?t<0?this[t+this.length]:this[t]:Y.call(this)},pushStack:function(t){var e=it.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t){return it.each(this,t)},map:function(t){return this.pushStack(it.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(Y.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:Q,sort:V.sort,splice:V.splice},it.extend=it.fn.extend=function(){var t,e,n,i,o,r,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||it.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)n=a[e],a!==(i=t[e])&&(c&&i&&(it.isPlainObject(i)||(o=it.isArray(i)))?(o?(o=!1,r=n&&it.isArray(n)?n:[]):r=n&&it.isPlainObject(n)?n:{},a[e]=it.extend(c,r,i)):void 0!==i&&(a[e]=i));return a},it.extend({expando:"jQuery"+("2.2.4"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===it.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=t&&t.toString();return!it.isArray(t)&&e-parseFloat(e)+1>=0},isPlainObject:function(t){var e;if("object"!==it.type(t)||t.nodeType||it.isWindow(t))return!1;if(t.constructor&&!et.call(t,"constructor")&&!et.call(t.constructor.prototype||{},"isPrototypeOf"))return!1;for(e in t);return void 0===e||et.call(t,e)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?J[tt.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;(t=it.trim(t))&&(1===t.indexOf("use strict")?((e=X.createElement("script")).text=t,X.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(rt,"ms-").replace(at,st)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,o=0;if(n(t))for(i=t.length;o<i&&!1!==e.call(t[o],o,t[o]);o++);else for(o in t)if(!1===e.call(t[o],o,t[o]))break;return t},trim:function(t){return null==t?"":(t+"").replace(ot,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?it.merge(i,"string"==typeof t?[t]:t):Q.call(i,t)),i},inArray:function(t,e,n){return null==e?-1:Z.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,o=t.length;i<n;i++)t[o++]=e[i];return t.length=o,t},grep:function(t,e,n){for(var i=[],o=0,r=t.length,a=!n;o<r;o++)!e(t[o],o)!==a&&i.push(t[o]);return i},map:function(t,e,i){var o,r,a=0,s=[];if(n(t))for(o=t.length;a<o;a++)null!=(r=e(t[a],a,i))&&s.push(r);else for(a in t)null!=(r=e(t[a],a,i))&&s.push(r);return K.apply([],s)},guid:1,proxy:function(t,e){var n,i,o;if("string"==typeof e&&(n=t[e],e=t,t=n),it.isFunction(t))return i=Y.call(arguments,2),o=function(){return t.apply(e||this,i.concat(Y.call(arguments)))},o.guid=t.guid=t.guid||it.guid++,o},now:Date.now,support:nt}),"function"==typeof Symbol&&(it.fn[Symbol.iterator]=V[Symbol.iterator]),it.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){J["[object "+e+"]"]=e.toLowerCase()});var lt=function(t){function e(t,e,n,i){var o,r,a,s,c,d,f,h,p=e&&e.ownerDocument,g=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==g&&9!==g&&11!==g)return n;if(!i&&((e?e.ownerDocument||e:L)!==O&&D(e),e=e||O,k)){if(11!==g&&(d=gt.exec(t)))if(o=d[1]){if(9===g){if(!(a=e.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(p&&(a=p.getElementById(o))&&$(e,a)&&a.id===o)return n.push(a),n}else{if(d[2])return K.apply(n,e.getElementsByTagName(t)),n;if((o=d[3])&&b.getElementsByClassName&&e.getElementsByClassName)return K.apply(n,e.getElementsByClassName(o)),n}if(b.qsa&&!U[t+" "]&&(!P||!P.test(t))){if(1!==g)p=e,h=t;else if("object"!==e.nodeName.toLowerCase()){for((s=e.getAttribute("id"))?s=s.replace(vt,"\\$&"):e.setAttribute("id",s=F),r=(f=S(t)).length,c=ut.test(s)?"#"+s:"[id='"+s+"']";r--;)f[r]=c+" "+u(f[r]);h=f.join(","),p=mt.test(t)&&l(e.parentNode)||e}if(h)try{return K.apply(n,p.querySelectorAll(h)),n}catch(t){}finally{s===F&&e.removeAttribute("id")}}}return A(t.replace(rt,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>w.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[F]=!0,t}function o(t){var e=O.createElement("div");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function r(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function a(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||G)-(~t.sourceIndex||G);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function s(t){return i(function(e){return e=+e,i(function(n,i){for(var o,r=t([],n.length,e),a=r.length;a--;)n[o=r[a]]&&(n[o]=!(i[o]=n[o]))})})}function l(t){return t&&void 0!==t.getElementsByTagName&&t}function c(){}function u(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function d(t,e,n){var i=e.dir,o=n&&"parentNode"===i,r=j++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,r)}:function(e,n,a){var s,l,c,u=[M,r];if(a){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,a))return!0}else for(;e=e[i];)if(1===e.nodeType||o){if(c=e[F]||(e[F]={}),l=c[e.uniqueID]||(c[e.uniqueID]={}),(s=l[i])&&s[0]===M&&s[1]===r)return u[2]=s[2];if(l[i]=u,u[2]=t(e,n,a))return!0}}}function f(t){return t.length>1?function(e,n,i){for(var o=t.length;o--;)if(!t[o](e,n,i))return!1;return!0}:t[0]}function h(t,n,i){for(var o=0,r=n.length;o<r;o++)e(t,n[o],i);return i}function p(t,e,n,i,o){for(var r,a=[],s=0,l=t.length,c=null!=e;s<l;s++)(r=t[s])&&(n&&!n(r,i,o)||(a.push(r),c&&e.push(s)));return a}function g(t,e,n,o,r,a){return o&&!o[F]&&(o=g(o)),r&&!r[F]&&(r=g(r,a)),i(function(i,a,s,l){var c,u,d,f=[],g=[],m=a.length,v=i||h(e||"*",s.nodeType?[s]:s,[]),y=!t||!i&&e?v:p(v,f,t,s,l),b=n?r||(i?t:m||o)?[]:a:y;if(n&&n(y,b,s,l),o)for(c=p(b,g),o(c,[],s,l),u=c.length;u--;)(d=c[u])&&(b[g[u]]=!(y[g[u]]=d));if(i){if(r||t){if(r){for(c=[],u=b.length;u--;)(d=b[u])&&c.push(y[u]=d);r(null,b=[],c,l)}for(u=b.length;u--;)(d=b[u])&&(c=r?Z(i,d):f[u])>-1&&(i[c]=!(a[c]=d))}}else b=p(b===a?b.splice(m,b.length):b),r?r(null,a,b,l):K.apply(a,b)})}function m(t){for(var e,n,i,o=t.length,r=w.relative[t[0].type],a=r||w.relative[" "],s=r?1:0,l=d(function(t){return t===e},a,!0),c=d(function(t){return Z(e,t)>-1},a,!0),h=[function(t,n,i){var o=!r&&(i||n!==T)||((e=n).nodeType?l(t,n,i):c(t,n,i));return e=null,o}];s<o;s++)if(n=w.relative[t[s].type])h=[d(f(h),n)];else{if((n=w.filter[t[s].type].apply(null,t[s].matches))[F]){for(i=++s;i<o&&!w.relative[t[i].type];i++);return g(s>1&&f(h),s>1&&u(t.slice(0,s-1).concat({value:" "===t[s-2].type?"*":""})).replace(rt,"$1"),n,s<i&&m(t.slice(s,i)),i<o&&m(t=t.slice(i)),i<o&&u(t))}h.push(n)}return f(h)}function v(t,n){var o=n.length>0,r=t.length>0,a=function(i,a,s,l,c){var u,d,f,h=0,g="0",m=i&&[],v=[],y=T,b=i||r&&w.find.TAG("*",c),x=M+=null==y?1:Math.random()||.1,C=b.length;for(c&&(T=a===O||a||c);g!==C&&null!=(u=b[g]);g++){if(r&&u){for(d=0,a||u.ownerDocument===O||(D(u),s=!k);f=t[d++];)if(f(u,a||O,s)){l.push(u);break}c&&(M=x)}o&&((u=!f&&u)&&h--,i&&m.push(u))}if(h+=g,o&&g!==h){for(d=0;f=n[d++];)f(m,v,a,s);if(i){if(h>0)for(;g--;)m[g]||v[g]||(v[g]=X.call(l));v=p(v)}K.apply(l,v),c&&!i&&v.length>0&&h+n.length>1&&e.uniqueSort(l)}return c&&(M=x,T=y),m};return o?i(a):a}var y,b,w,x,C,S,_,A,T,E,I,D,O,N,k,P,R,B,$,F="sizzle"+1*new Date,L=t.document,M=0,j=0,H=n(),W=n(),U=n(),q=function(t,e){return t===e&&(I=!0),0},G=1<<31,z={}.hasOwnProperty,V=[],X=V.pop,Y=V.push,K=V.push,Q=V.slice,Z=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",tt="[\\x20\\t\\r\\n\\f]",et="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",nt="\\["+tt+"*("+et+")(?:"+tt+"*([*^$|!~]?=)"+tt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+et+"))|)"+tt+"*\\]",it=":("+et+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+nt+")*)|.*)\\)|)",ot=new RegExp(tt+"+","g"),rt=new RegExp("^"+tt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+tt+"+$","g"),at=new RegExp("^"+tt+"*,"+tt+"*"),st=new RegExp("^"+tt+"*([>+~]|"+tt+")"+tt+"*"),lt=new RegExp("="+tt+"*([^\\]'\"]*?)"+tt+"*\\]","g"),ct=new RegExp(it),ut=new RegExp("^"+et+"$"),dt={ID:new RegExp("^#("+et+")"),CLASS:new RegExp("^\\.("+et+")"),TAG:new RegExp("^("+et+"|[*])"),ATTR:new RegExp("^"+nt),PSEUDO:new RegExp("^"+it),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+tt+"*(even|odd|(([+-]|)(\\d*)n|)"+tt+"*(?:([+-]|)"+tt+"*(\\d+)|))"+tt+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+tt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+tt+"*((?:-\\d)?\\d*)"+tt+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,ht=/^h\d$/i,pt=/^[^{]+\{\s*\[native \w/,gt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,mt=/[+~]/,vt=/'|\\/g,yt=new RegExp("\\\\([\\da-f]{1,6}"+tt+"?|("+tt+")|.)","ig"),bt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},wt=function(){D()};try{K.apply(V=Q.call(L.childNodes),L.childNodes),V[L.childNodes.length].nodeType}catch(t){K={apply:V.length?function(t,e){Y.apply(t,Q.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}b=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},D=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:L;return i!==O&&9===i.nodeType&&i.documentElement?(O=i,N=O.documentElement,k=!C(O),(n=O.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",wt,!1):n.attachEvent&&n.attachEvent("onunload",wt)),b.attributes=o(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=o(function(t){return t.appendChild(O.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=pt.test(O.getElementsByClassName),b.getById=o(function(t){return N.appendChild(t).id=F,!O.getElementsByName||!O.getElementsByName(F).length}),b.getById?(w.find.ID=function(t,e){if(void 0!==e.getElementById&&k){var n=e.getElementById(t);return n?[n]:[]}},w.filter.ID=function(t){var e=t.replace(yt,bt);return function(t){return t.getAttribute("id")===e}}):(delete w.find.ID,w.filter.ID=function(t){var e=t.replace(yt,bt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),w.find.TAG=b.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],o=0,r=e.getElementsByTagName(t);if("*"===t){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},w.find.CLASS=b.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&k)return e.getElementsByClassName(t)},R=[],P=[],(b.qsa=pt.test(O.querySelectorAll))&&(o(function(t){N.appendChild(t).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+tt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||P.push("\\["+tt+"*(?:value|"+J+")"),t.querySelectorAll("[id~="+F+"-]").length||P.push("~="),t.querySelectorAll(":checked").length||P.push(":checked"),t.querySelectorAll("a#"+F+"+*").length||P.push(".#.+[+~]")}),o(function(t){var e=O.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&P.push("name"+tt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||P.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),P.push(",.*:")})),(b.matchesSelector=pt.test(B=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&o(function(t){b.disconnectedMatch=B.call(t,"div"),B.call(t,"[s!='']:x"),R.push("!=",it)}),P=P.length&&new RegExp(P.join("|")),R=R.length&&new RegExp(R.join("|")),e=pt.test(N.compareDocumentPosition),$=e||pt.test(N.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},q=e?function(t,e){if(t===e)return I=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===O||t.ownerDocument===L&&$(L,t)?-1:e===O||e.ownerDocument===L&&$(L,e)?1:E?Z(E,t)-Z(E,e):0:4&n?-1:1)}:function(t,e){if(t===e)return I=!0,0;var n,i=0,o=t.parentNode,r=e.parentNode,s=[t],l=[e];if(!o||!r)return t===O?-1:e===O?1:o?-1:r?1:E?Z(E,t)-Z(E,e):0;if(o===r)return a(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;s[i]===l[i];)i++;return i?a(s[i],l[i]):s[i]===L?-1:l[i]===L?1:0},O):O},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==O&&D(t),n=n.replace(lt,"='$1']"),b.matchesSelector&&k&&!U[n+" "]&&(!R||!R.test(n))&&(!P||!P.test(n)))try{var i=B.call(t,n);if(i||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return e(n,O,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==O&&D(t),$(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==O&&D(t);var n=w.attrHandle[e.toLowerCase()],i=n&&z.call(w.attrHandle,e.toLowerCase())?n(t,e,!k):void 0;return void 0!==i?i:b.attributes||!k?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,o=0;if(I=!b.detectDuplicates,E=!b.sortStable&&t.slice(0),t.sort(q),I){for(;e=t[o++];)e===t[o]&&(i=n.push(o));for(;i--;)t.splice(n[i],1)}return E=null,t},x=e.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=x(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=x(e);return n},(w=e.selectors={cacheLength:50,createPseudo:i,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,bt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,bt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ct.test(n)&&(e=S(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,bt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=H[t+" "];return e||(e=new RegExp("(^|"+tt+")"+t+"("+tt+"|$)"))&&H(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(o){var r=e.attr(o,t);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(ot," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,o){var r="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===i&&0===o?function(t){return!!t.parentNode}:function(e,n,l){var c,u,d,f,h,p,g=r!==a?"nextSibling":"previousSibling",m=e.parentNode,v=s&&e.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(r){for(;g;){for(f=e;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&y){for(b=(h=(c=(u=(d=(f=m)[F]||(f[F]={}))[f.uniqueID]||(d[f.uniqueID]={}))[t]||[])[0]===M&&c[1])&&c[2],f=h&&m.childNodes[h];f=++h&&f&&f[g]||(b=h=0)||p.pop();)if(1===f.nodeType&&++b&&f===e){u[t]=[M,h,b];break}}else if(y&&(b=h=(c=(u=(d=(f=e)[F]||(f[F]={}))[f.uniqueID]||(d[f.uniqueID]={}))[t]||[])[0]===M&&c[1]),!1===b)for(;(f=++h&&f&&f[g]||(b=h=0)||p.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++b||(y&&((u=(d=f[F]||(f[F]={}))[f.uniqueID]||(d[f.uniqueID]={}))[t]=[M,b]),f!==e)););return(b-=o)===i||b%i==0&&b/i>=0}}},PSEUDO:function(t,n){var o,r=w.pseudos[t]||w.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return r[F]?r(n):r.length>1?(o=[t,t,"",n],w.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,o=r(t,n),a=o.length;a--;)t[i=Z(t,o[a])]=!(e[i]=o[a])}):function(t){return r(t,0,o)}):r}},pseudos:{not:i(function(t){var e=[],n=[],o=_(t.replace(rt,"$1"));return o[F]?i(function(t,e,n,i){for(var r,a=o(t,null,i,[]),s=t.length;s--;)(r=a[s])&&(t[s]=!(e[s]=r))}):function(t,i,r){return e[0]=t,o(e,null,r,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(yt,bt),function(e){return(e.textContent||e.innerText||x(e)).indexOf(t)>-1}}),lang:i(function(t){return ut.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,bt).toLowerCase(),function(e){var n;do{if(n=k?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===N},focus:function(t){return t===O.activeElement&&(!O.hasFocus||O.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return!1===t.disabled},disabled:function(t){return!0===t.disabled},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return ht.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:s(function(){return[0]}),last:s(function(t,e){return[e-1]}),eq:s(function(t,e,n){return[n<0?n+e:n]}),even:s(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:s(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:s(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:s(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[y]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(y);for(y in{submit:!0,reset:!0})w.pseudos[y]=function(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}(y);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,S=e.tokenize=function(t,n){var i,o,r,a,s,l,c,u=W[t+" "];if(u)return n?0:u.slice(0);for(s=t,l=[],c=w.preFilter;s;){i&&!(o=at.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(r=[])),i=!1,(o=st.exec(s))&&(i=o.shift(),r.push({value:i,type:o[0].replace(rt," ")}),s=s.slice(i.length));for(a in w.filter)!(o=dt[a].exec(s))||c[a]&&!(o=c[a](o))||(i=o.shift(),r.push({value:i,type:a,matches:o}),s=s.slice(i.length));if(!i)break}return n?s.length:s?e.error(t):W(t,l).slice(0)},_=e.compile=function(t,e){var n,i=[],o=[],r=U[t+" "];if(!r){for(e||(e=S(t)),n=e.length;n--;)(r=m(e[n]))[F]?i.push(r):o.push(r);(r=U(t,v(o,i))).selector=t}return r},A=e.select=function(t,e,n,i){var o,r,a,s,c,d="function"==typeof t&&t,f=!i&&S(t=d.selector||t);if(n=n||[],1===f.length){if((r=f[0]=f[0].slice(0)).length>2&&"ID"===(a=r[0]).type&&b.getById&&9===e.nodeType&&k&&w.relative[r[1].type]){if(!(e=(w.find.ID(a.matches[0].replace(yt,bt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(o=dt.needsContext.test(t)?0:r.length;o--&&(a=r[o],!w.relative[s=a.type]);)if((c=w.find[s])&&(i=c(a.matches[0].replace(yt,bt),mt.test(r[0].type)&&l(e.parentNode)||e))){if(r.splice(o,1),!(t=i.length&&u(r)))return K.apply(n,i),n;break}}return(d||_(t,f))(i,e,!k,n,!e||mt.test(t)&&l(e.parentNode)||e),n},b.sortStable=F.split("").sort(q).join("")===F,b.detectDuplicates=!!I,D(),b.sortDetached=o(function(t){return 1&t.compareDocumentPosition(O.createElement("div"))}),o(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||r("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&o(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||r("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),o(function(t){return null==t.getAttribute("disabled")})||r(J,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);it.find=lt,it.expr=lt.selectors,it.expr[":"]=it.expr.pseudos,it.uniqueSort=it.unique=lt.uniqueSort,it.text=lt.getText,it.isXMLDoc=lt.isXML,it.contains=lt.contains;var ct=function(t,e,n){for(var i=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&it(t).is(n))break;i.push(t)}return i},ut=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},dt=it.expr.match.needsContext,ft=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,ht=/^.[^:#\[\.,]*$/;it.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?it.find.matchesSelector(i,t)?[i]:[]:it.find.matches(t,it.grep(e,function(t){return 1===t.nodeType}))},it.fn.extend({find:function(t){var e,n=this.length,i=[],o=this;if("string"!=typeof t)return this.pushStack(it(t).filter(function(){for(e=0;e<n;e++)if(it.contains(o[e],this))return!0}));for(e=0;e<n;e++)it.find(t,o[e],i);return i=this.pushStack(n>1?it.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&dt.test(t)?it(t):t||[],!1).length}});var pt,gt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/;(it.fn.init=function(t,e,n){var i,o;if(!t)return this;if(n=n||pt,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:gt.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof it?e[0]:e,it.merge(this,it.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:X,!0)),ft.test(i[1])&&it.isPlainObject(e))for(i in e)it.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(o=X.getElementById(i[2]))&&o.parentNode&&(this.length=1,this[0]=o),this.context=X,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):it.isFunction(t)?void 0!==n.ready?n.ready(t):t(it):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),it.makeArray(t,this))}).prototype=it.fn,pt=it(X);var mt=/^(?:parents|prev(?:Until|All))/,vt={children:!0,contents:!0,next:!0,prev:!0};it.fn.extend({has:function(t){var e=it(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(it.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,i=0,o=this.length,r=[],a=dt.test(t)||"string"!=typeof t?it(t,e||this.context):0;i<o;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&it.find.matchesSelector(n,t))){r.push(n);break}return this.pushStack(r.length>1?it.uniqueSort(r):r)},index:function(t){return t?"string"==typeof t?Z.call(it(t),this[0]):Z.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(it.uniqueSort(it.merge(this.get(),it(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),it.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return ct(t,"parentNode")},parentsUntil:function(t,e,n){return ct(t,"parentNode",n)},next:function(t){return o(t,"nextSibling")},prev:function(t){return o(t,"previousSibling")},nextAll:function(t){return ct(t,"nextSibling")},prevAll:function(t){return ct(t,"previousSibling")},nextUntil:function(t,e,n){return ct(t,"nextSibling",n)},prevUntil:function(t,e,n){return ct(t,"previousSibling",n)},siblings:function(t){return ut((t.parentNode||{}).firstChild,t)},children:function(t){return ut(t.firstChild)},contents:function(t){return t.contentDocument||it.merge([],t.childNodes)}},function(t,e){it.fn[t]=function(n,i){var o=it.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=it.filter(i,o)),this.length>1&&(vt[t]||it.uniqueSort(o),mt.test(t)&&o.reverse()),this.pushStack(o)}});var yt=/\S+/g;it.Callbacks=function(t){t="string"==typeof t?r(t):it.extend({},t);var e,n,i,o,a=[],s=[],l=-1,c=function(){for(o=t.once,i=e=!0;s.length;l=-1)for(n=s.shift();++l<a.length;)!1===a[l].apply(n[0],n[1])&&t.stopOnFalse&&(l=a.length,n=!1);t.memory||(n=!1),e=!1,o&&(a=n?[]:"")},u={add:function(){return a&&(n&&!e&&(l=a.length-1,s.push(n)),function e(n){it.each(n,function(n,i){it.isFunction(i)?t.unique&&u.has(i)||a.push(i):i&&i.length&&"string"!==it.type(i)&&e(i)})}(arguments),n&&!e&&c()),this},remove:function(){return it.each(arguments,function(t,e){for(var n;(n=it.inArray(e,a,n))>-1;)a.splice(n,1),n<=l&&l--}),this},has:function(t){return t?it.inArray(t,a)>-1:a.length>0},empty:function(){return a&&(a=[]),this},disable:function(){return o=s=[],a=n="",this},disabled:function(){return!a},lock:function(){return o=s=[],n||(a=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},it.extend({Deferred:function(t){var e=[["resolve","done",it.Callbacks("once memory"),"resolved"],["reject","fail",it.Callbacks("once memory"),"rejected"],["notify","progress",it.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},then:function(){var t=arguments;return it.Deferred(function(n){it.each(e,function(e,r){var a=it.isFunction(t[e])&&t[e];o[r[1]](function(){var t=a&&a.apply(this,arguments);t&&it.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this===i?n.promise():this,a?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?it.extend(t,i):i}},o={};return i.pipe=i.then,it.each(e,function(t,r){var a=r[2],s=r[3];i[r[1]]=a.add,s&&a.add(function(){n=s},e[1^t][2].disable,e[2][2].lock),o[r[0]]=function(){return o[r[0]+"With"](this===o?i:this,arguments),this},o[r[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e,n,i,o=0,r=Y.call(arguments),a=r.length,s=1!==a||t&&it.isFunction(t.promise)?a:0,l=1===s?t:it.Deferred(),c=function(t,n,i){return function(o){n[t]=this,i[t]=arguments.length>1?Y.call(arguments):o,i===e?l.notifyWith(n,i):--s||l.resolveWith(n,i)}};if(a>1)for(e=new Array(a),n=new Array(a),i=new Array(a);o<a;o++)r[o]&&it.isFunction(r[o].promise)?r[o].promise().progress(c(o,n,e)).done(c(o,i,r)).fail(l.reject):--s;return s||l.resolveWith(i,r),l.promise()}});var bt;it.fn.ready=function(t){return it.ready.promise().done(t),this},it.extend({isReady:!1,readyWait:1,holdReady:function(t){t?it.readyWait++:it.ready(!0)},ready:function(t){(!0===t?--it.readyWait:it.isReady)||(it.isReady=!0,!0!==t&&--it.readyWait>0||(bt.resolveWith(X,[it]),it.fn.triggerHandler&&(it(X).triggerHandler("ready"),it(X).off("ready"))))}}),it.ready.promise=function(e){return bt||(bt=it.Deferred(),"complete"===X.readyState||"loading"!==X.readyState&&!X.documentElement.doScroll?t.setTimeout(it.ready):(X.addEventListener("DOMContentLoaded",a),t.addEventListener("load",a))),bt.promise(e)},it.ready.promise();var wt=function(t,e,n,i,o,r,a){var s=0,l=t.length,c=null==n;if("object"===it.type(n)){o=!0;for(s in n)wt(t,e,s,n[s],!0,r,a)}else if(void 0!==i&&(o=!0,it.isFunction(i)||(a=!0),c&&(a?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(it(t),n)})),e))for(;s<l;s++)e(t[s],n,a?i:i.call(t[s],s,e(t[s],n)));return o?t:c?e.call(t):l?e(t[0],n):r},xt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};s.uid=1,s.prototype={register:function(t,e){var n=e||{};return t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,writable:!0,configurable:!0}),t[this.expando]},cache:function(t){if(!xt(t))return{};var e=t[this.expando];return e||(e={},xt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,o=this.cache(t);if("string"==typeof e)o[e]=n;else for(i in e)o[i]=e[i];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][e]},access:function(t,e,n){var i;return void 0===e||e&&"string"==typeof e&&void 0===n?void 0!==(i=this.get(t,e))?i:this.get(t,it.camelCase(e)):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i,o,r=t[this.expando];if(void 0!==r){if(void 0===e)this.register(t);else{it.isArray(e)?i=e.concat(e.map(it.camelCase)):(o=it.camelCase(e),i=e in r?[e,o]:(i=o)in r?[i]:i.match(yt)||[]),n=i.length;for(;n--;)delete r[i[n]]}(void 0===e||it.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!it.isEmptyObject(e)}};var Ct=new s,St=new s,_t=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,At=/[A-Z]/g;it.extend({hasData:function(t){return St.hasData(t)||Ct.hasData(t)},data:function(t,e,n){return St.access(t,e,n)},removeData:function(t,e){St.remove(t,e)},_data:function(t,e,n){return Ct.access(t,e,n)},_removeData:function(t,e){Ct.remove(t,e)}}),it.fn.extend({data:function(t,e){var n,i,o,r=this[0],a=r&&r.attributes;if(void 0===t){if(this.length&&(o=St.get(r),1===r.nodeType&&!Ct.get(r,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=it.camelCase(i.slice(5)),l(r,i,o[i]));Ct.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){St.set(this,t)}):wt(this,function(e){var n,i;if(r&&void 0===e){if(void 0!==(n=St.get(r,t)||St.get(r,t.replace(At,"-$&").toLowerCase())))return n;if(i=it.camelCase(t),void 0!==(n=St.get(r,i)))return n;if(void 0!==(n=l(r,i,void 0)))return n}else i=it.camelCase(t),this.each(function(){var n=St.get(this,i);St.set(this,i,e),t.indexOf("-")>-1&&void 0!==n&&St.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){St.remove(this,t)})}}),it.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Ct.get(t,e),n&&(!i||it.isArray(n)?i=Ct.access(t,e,it.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=it.queue(t,e),i=n.length,o=n.shift(),r=it._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===e&&n.unshift("inprogress"),delete r.stop,o.call(t,function(){it.dequeue(t,e)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Ct.get(t,n)||Ct.access(t,n,{empty:it.Callbacks("once memory").add(function(){Ct.remove(t,[e+"queue",n])})})}}),it.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?it.queue(this[0],t):void 0===e?this:this.each(function(){var n=it.queue(this,t,e);it._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&it.dequeue(this,t)})},dequeue:function(t){return this.each(function(){it.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,o=it.Deferred(),r=this,a=this.length,s=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=Ct.get(r[a],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),o.promise(e)}});var Tt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Et=new RegExp("^(?:([+-])=|)("+Tt+")([a-z%]*)$","i"),It=["Top","Right","Bottom","Left"],Dt=function(t,e){return t=e||t,"none"===it.css(t,"display")||!it.contains(t.ownerDocument,t)},Ot=/^(?:checkbox|radio)$/i,Nt=/<([\w:-]+)/,kt=/^$|\/(?:java|ecma)script/i,Pt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Pt.optgroup=Pt.option,Pt.tbody=Pt.tfoot=Pt.colgroup=Pt.caption=Pt.thead,Pt.th=Pt.td;var Rt=/<|&#?\w+;/;!function(){var t=X.createDocumentFragment().appendChild(X.createElement("div")),e=X.createElement("input");e.setAttribute("type","radio"),e.setAttribute("checked","checked"),e.setAttribute("name","t"),t.appendChild(e),nt.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",nt.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Bt=/^key/,$t=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ft=/^([^.]*)(?:\.(.+)|)/;it.event={global:{},add:function(t,e,n,i,o){var r,a,s,l,c,u,d,f,h,p,g,m=Ct.get(t);if(m)for(n.handler&&(n=(r=n).handler,o=r.selector),n.guid||(n.guid=it.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(e){return void 0!==it&&it.event.triggered!==e.type?it.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(yt)||[""]).length;c--;)h=g=(s=Ft.exec(e[c])||[])[1],p=(s[2]||"").split(".").sort(),h&&(d=it.event.special[h]||{},h=(o?d.delegateType:d.bindType)||h,d=it.event.special[h]||{},u=it.extend({type:h,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&it.expr.match.needsContext.test(o),namespace:p.join(".")},r),(f=l[h])||((f=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,p,a)||t.addEventListener&&t.addEventListener(h,a)),d.add&&(d.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),it.event.global[h]=!0)},remove:function(t,e,n,i,o){var r,a,s,l,c,u,d,f,h,p,g,m=Ct.hasData(t)&&Ct.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(yt)||[""]).length;c--;)if(s=Ft.exec(e[c])||[],h=g=s[1],p=(s[2]||"").split(".").sort(),h){for(d=it.event.special[h]||{},f=l[h=(i?d.delegateType:d.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=f.length;r--;)u=f[r],!o&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(r,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(t,u));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(t,p,m.handle)||it.removeEvent(t,h,m.handle),delete l[h])}else for(h in l)it.event.remove(t,h+e[c],n,i,!0);it.isEmptyObject(l)&&Ct.remove(t,"handle events")}},dispatch:function(t){t=it.event.fix(t);var e,n,i,o,r,a=[],s=Y.call(arguments),l=(Ct.get(this,"events")||{})[t.type]||[],c=it.event.special[t.type]||{};if(s[0]=t,t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){for(a=it.event.handlers.call(this,t,l),e=0;(o=a[e++])&&!t.isPropagationStopped();)for(t.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!t.isImmediatePropagationStopped();)t.rnamespace&&!t.rnamespace.test(r.namespace)||(t.handleObj=r,t.data=r.data,void 0!==(i=((it.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,s))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,o,r,a=[],s=e.delegateCount,l=t.target;if(s&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(!0!==l.disabled||"click"!==t.type)){for(i=[],n=0;n<s;n++)void 0===i[o=(r=e[n]).selector+" "]&&(i[o]=r.needsContext?it(o,this).index(l)>-1:it.find(o,this,null,[l]).length),i[o]&&i.push(r);i.length&&a.push({elem:l,handlers:i})}return s<e.length&&a.push({elem:this,handlers:e.slice(s)}),a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,o,r=e.button;return null==t.pageX&&null!=e.clientX&&(i=(n=t.target.ownerDocument||X).documentElement,o=n.body,t.pageX=e.clientX+(i&&i.scrollLeft||o&&o.scrollLeft||0)-(i&&i.clientLeft||o&&o.clientLeft||0),t.pageY=e.clientY+(i&&i.scrollTop||o&&o.scrollTop||0)-(i&&i.clientTop||o&&o.clientTop||0)),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},fix:function(t){if(t[it.expando])return t;var e,n,i,o=t.type,r=t,a=this.fixHooks[o];for(a||(this.fixHooks[o]=a=$t.test(o)?this.mouseHooks:Bt.test(o)?this.keyHooks:{}),i=a.props?this.props.concat(a.props):this.props,t=new it.Event(r),e=i.length;e--;)t[n=i[e]]=r[n];return t.target||(t.target=X),3===t.target.nodeType&&(t.target=t.target.parentNode),a.filter?a.filter(t,r):t},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==g()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===g()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&it.nodeName(this,"input"))return this.click(),!1},_default:function(t){return it.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},it.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},it.Event=function(t,e){if(!(this instanceof it.Event))return new it.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?h:p):this.type=t,e&&it.extend(this,e),this.timeStamp=t&&t.timeStamp||it.now(),this[it.expando]=!0},it.Event.prototype={constructor:it.Event,isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=h,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=h,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=h,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},it.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){it.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,o=t.relatedTarget,r=t.handleObj;return o&&(o===i||it.contains(i,o))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),it.fn.extend({on:function(t,e,n,i){return m(this,t,e,n,i)},one:function(t,e,n,i){return m(this,t,e,n,i,1)},off:function(t,e,n){var i,o;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,it(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=p),this.each(function(){it.event.remove(this,t,n,e)})}});var Lt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Mt=/<script|<style|<link/i,jt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ht=/^true\/(.*)/,Wt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;it.extend({htmlPrefilter:function(t){return t.replace(Lt,"<$1></$2>")},clone:function(t,e,n){var i,o,r,a,s=t.cloneNode(!0),l=it.contains(t.ownerDocument,t);if(!(nt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||it.isXMLDoc(t)))for(a=u(s),i=0,o=(r=u(t)).length;i<o;i++)x(r[i],a[i]);if(e)if(n)for(r=r||u(t),a=a||u(s),i=0,o=r.length;i<o;i++)w(r[i],a[i]);else w(t,s);return(a=u(s,"script")).length>0&&d(a,!l&&u(t,"script")),s},cleanData:function(t){for(var e,n,i,o=it.event.special,r=0;void 0!==(n=t[r]);r++)if(xt(n)){if(e=n[Ct.expando]){if(e.events)for(i in e.events)o[i]?it.event.remove(n,i):it.removeEvent(n,i,e.handle);n[Ct.expando]=void 0}n[St.expando]&&(n[St.expando]=void 0)}}}),it.fn.extend({domManip:C,detach:function(t){return S(this,t,!0)},remove:function(t){return S(this,t)},text:function(t){return wt(this,function(t){return void 0===t?it.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return C(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||v(this,t).appendChild(t)})},prepend:function(){return C(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=v(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return C(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return C(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(it.cleanData(u(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return it.clone(this,t,e)})},html:function(t){return wt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mt.test(t)&&!Pt[(Nt.exec(t)||["",""])[1].toLowerCase()]){t=it.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(it.cleanData(u(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return C(this,arguments,function(e){var n=this.parentNode;it.inArray(this,t)<0&&(it.cleanData(u(this)),n&&n.replaceChild(e,this))},t)}}),it.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){it.fn[t]=function(t){for(var n,i=[],o=it(t),r=o.length-1,a=0;a<=r;a++)n=a===r?this:this.clone(!0),it(o[a])[e](n),Q.apply(i,n.get());return this.pushStack(i)}});var Ut,qt={HTML:"block",BODY:"block"},Gt=/^margin/,zt=new RegExp("^("+Tt+")(?!px)[a-z%]+$","i"),Vt=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},Xt=function(t,e,n,i){var o,r,a={};for(r in e)a[r]=t.style[r],t.style[r]=e[r];o=n.apply(t,i||[]);for(r in e)t.style[r]=a[r];return o},Yt=X.documentElement;!function(){function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Yt.appendChild(a);var e=t.getComputedStyle(s);n="1%"!==e.top,r="2px"===e.marginLeft,i="4px"===e.width,s.style.marginRight="50%",o="4px"===e.marginRight,Yt.removeChild(a)}var n,i,o,r,a=X.createElement("div"),s=X.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",nt.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),it.extend(nt,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==i&&e(),i},pixelMarginRight:function(){return null==i&&e(),o},reliableMarginLeft:function(){return null==i&&e(),r},reliableMarginRight:function(){var e,n=s.appendChild(X.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",Yt.appendChild(a),e=!parseFloat(t.getComputedStyle(n).marginRight),Yt.removeChild(a),s.removeChild(n),e}}))}();var Kt=/^(none|table(?!-c[ea]).+)/,Qt={position:"absolute",visibility:"hidden",display:"block"},Zt={letterSpacing:"0",fontWeight:"400"},Jt=["Webkit","O","Moz","ms"],te=X.createElement("div").style;it.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=T(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,r,a,s=it.camelCase(e),l=t.style;if(e=it.cssProps[s]||(it.cssProps[s]=I(s)||s),a=it.cssHooks[e]||it.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(t,!1,i))?o:l[e];"string"==(r=typeof n)&&(o=Et.exec(n))&&o[1]&&(n=c(t,e,o),r="number"),null!=n&&n==n&&("number"===r&&(n+=o&&o[3]||(it.cssNumber[s]?"":"px")),nt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,i))||(l[e]=n))}},css:function(t,e,n,i){var o,r,a,s=it.camelCase(e);return e=it.cssProps[s]||(it.cssProps[s]=I(s)||s),(a=it.cssHooks[e]||it.cssHooks[s])&&"get"in a&&(o=a.get(t,!0,n)),void 0===o&&(o=T(t,e,i)),"normal"===o&&e in Zt&&(o=Zt[e]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),it.each(["height","width"],function(t,e){it.cssHooks[e]={get:function(t,n,i){if(n)return Kt.test(it.css(t,"display"))&&0===t.offsetWidth?Xt(t,Qt,function(){return N(t,e,i)}):N(t,e,i)},set:function(t,n,i){var o,r=i&&Vt(t),a=i&&O(t,e,i,"border-box"===it.css(t,"boxSizing",!1,r),r);return a&&(o=Et.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=it.css(t,e)),D(0,n,a)}}}),it.cssHooks.marginLeft=E(nt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(T(t,"marginLeft"))||t.getBoundingClientRect().left-Xt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),it.cssHooks.marginRight=E(nt.reliableMarginRight,function(t,e){if(e)return Xt(t,{display:"inline-block"},T,[t,"marginRight"])}),it.each({margin:"",padding:"",border:"Width"},function(t,e){it.cssHooks[t+e]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[t+It[i]+e]=r[i]||r[i-2]||r[0];return o}},Gt.test(t)||(it.cssHooks[t+e].set=D)}),it.fn.extend({css:function(t,e){return wt(this,function(t,e,n){var i,o,r={},a=0;if(it.isArray(e)){for(i=Vt(t),o=e.length;a<o;a++)r[e[a]]=it.css(t,e[a],!1,i);return r}return void 0!==n?it.style(t,e,n):it.css(t,e)},t,e,arguments.length>1)},show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Dt(this)?it(this).show():it(this).hide()})}}),it.Tween=P,P.prototype={constructor:P,init:function(t,e,n,i,o,r){this.elem=t,this.prop=n,this.easing=o||it.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=r||(it.cssNumber[n]?"":"px")},cur:function(){var t=P.propHooks[this.prop];return t&&t.get?t.get(this):P.propHooks._default.get(this)},run:function(t){var e,n=P.propHooks[this.prop];return this.options.duration?this.pos=e=it.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):P.propHooks._default.set(this),this}},P.prototype.init.prototype=P.prototype,P.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=it.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){it.fx.step[t.prop]?it.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[it.cssProps[t.prop]]&&!it.cssHooks[t.prop]?t.elem[t.prop]=t.now:it.style(t.elem,t.prop,t.now+t.unit)}}},P.propHooks.scrollTop=P.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},it.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},it.fx=P.prototype.init,it.fx.step={};var ee,ne,ie=/^(?:toggle|show|hide)$/,oe=/queueHooks$/;it.Animation=it.extend(L,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return c(n.elem,t,Et.exec(e),n),n}]},tweener:function(t,e){it.isFunction(t)?(e=t,t=["*"]):t=t.match(yt);for(var n,i=0,o=t.length;i<o;i++)n=t[i],L.tweeners[n]=L.tweeners[n]||[],L.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,o,r,a,s,l,c,u=this,d={},f=t.style,h=t.nodeType&&Dt(t),p=Ct.get(t,"fxshow");n.queue||(null==(s=it._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,l=s.empty.fire,s.empty.fire=function(){s.unqueued||l()}),s.unqueued++,u.always(function(){u.always(function(){s.unqueued--,it.queue(t,"fx").length||s.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],"inline"===("none"===(c=it.css(t,"display"))?Ct.get(t,"olddisplay")||A(t.nodeName):c)&&"none"===it.css(t,"float")&&(f.display="inline-block")),n.overflow&&(f.overflow="hidden",u.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(i in e)if(o=e[i],ie.exec(o)){if(delete e[i],r=r||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!p||void 0===p[i])continue;h=!0}d[i]=p&&p[i]||it.style(t,i)}else c=void 0;if(it.isEmptyObject(d))"inline"===("none"===c?A(t.nodeName):c)&&(f.display=c);else{p?"hidden"in p&&(h=p.hidden):p=Ct.access(t,"fxshow",{}),r&&(p.hidden=!h),h?it(t).show():u.done(function(){it(t).hide()}),u.done(function(){var e;Ct.remove(t,"fxshow");for(e in d)it.style(t,e,d[e])});for(i in d)a=$(h?p[i]:0,i,u),i in p||(p[i]=a.start,h&&(a.end=a.start,a.start="width"===i||"height"===i?1:0))}}],prefilter:function(t,e){e?L.prefilters.unshift(t):L.prefilters.push(t)}}),it.speed=function(t,e,n){var i=t&&"object"==typeof t?it.extend({},t):{complete:n||!n&&e||it.isFunction(t)&&t,duration:t,easing:n&&e||e&&!it.isFunction(e)&&e};return i.duration=it.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in it.fx.speeds?it.fx.speeds[i.duration]:it.fx.speeds._default,null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){it.isFunction(i.old)&&i.old.call(this),i.queue&&it.dequeue(this,i.queue)},i},it.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Dt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var o=it.isEmptyObject(t),r=it.speed(e,n,i),a=function(){var e=L(this,it.extend({},t),r);(o||Ct.get(this,"finish"))&&e.stop(!0)};return a.finish=a,o||!1===r.queue?this.each(a):this.queue(r.queue,a)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",r=it.timers,a=Ct.get(this);if(o)a[o]&&a[o].stop&&i(a[o]);else for(o in a)a[o]&&a[o].stop&&oe.test(o)&&i(a[o]);for(o=r.length;o--;)r[o].elem!==this||null!=t&&r[o].queue!==t||(r[o].anim.stop(n),e=!1,r.splice(o,1));!e&&n||it.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Ct.get(this),i=n[t+"queue"],o=n[t+"queueHooks"],r=it.timers,a=i?i.length:0;for(n.finish=!0,it.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),it.each(["toggle","show","hide"],function(t,e){var n=it.fn[e];it.fn[e]=function(t,i,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(B(e,!0),t,i,o)}}),it.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){it.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),it.timers=[],it.fx.tick=function(){var t,e=0,n=it.timers;for(ee=it.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||it.fx.stop(),ee=void 0},it.fx.timer=function(t){it.timers.push(t),t()?it.fx.start():it.timers.pop()},it.fx.interval=13,it.fx.start=function(){ne||(ne=t.setInterval(it.fx.tick,it.fx.interval))},it.fx.stop=function(){t.clearInterval(ne),ne=null},it.fx.speeds={slow:600,fast:200,_default:400},it.fn.delay=function(e,n){return e=it.fx?it.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var o=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(o)}})},function(){var t=X.createElement("input"),e=X.createElement("select"),n=e.appendChild(X.createElement("option"));t.type="checkbox",nt.checkOn=""!==t.value,nt.optSelected=n.selected,e.disabled=!0,nt.optDisabled=!n.disabled,(t=X.createElement("input")).value="t",t.type="radio",nt.radioValue="t"===t.value}();var re,ae=it.expr.attrHandle;it.fn.extend({attr:function(t,e){return wt(this,it.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){it.removeAttr(this,t)})}}),it.extend({attr:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===t.getAttribute?it.prop(t,e,n):(1===r&&it.isXMLDoc(t)||(e=e.toLowerCase(),o=it.attrHooks[e]||(it.expr.match.bool.test(e)?re:void 0)),void 0!==n?null===n?void it.removeAttr(t,e):o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(i=o.get(t,e))?i:null==(i=it.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!nt.radioValue&&"radio"===e&&it.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i,o=0,r=e&&e.match(yt);if(r&&1===t.nodeType)for(;n=r[o++];)i=it.propFix[n]||n,it.expr.match.bool.test(n)&&(t[i]=!1),t.removeAttribute(n)}}),re={set:function(t,e,n){return!1===e?it.removeAttr(t,n):t.setAttribute(n,n),n}},it.each(it.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ae[e]||it.find.attr;ae[e]=function(t,e,i){var o,r;return i||(r=ae[e],ae[e]=o,o=null!=n(t,e,i)?e.toLowerCase():null,ae[e]=r),o}});var se=/^(?:input|select|textarea|button)$/i,le=/^(?:a|area)$/i;it.fn.extend({prop:function(t,e){return wt(this,it.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[it.propFix[t]||t]})}}),it.extend({prop:function(t,e,n){var i,o,r=t.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&it.isXMLDoc(t)||(e=it.propFix[e]||e,o=it.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(t,n,e))?i:t[e]=n:o&&"get"in o&&null!==(i=o.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=it.find.attr(t,"tabindex");return e?parseInt(e,10):se.test(t.nodeName)||le.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),nt.optSelected||(it.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),it.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){it.propFix[this.toLowerCase()]=this});var ce=/[\t\r\n\f]/g;it.fn.extend({addClass:function(t){var e,n,i,o,r,a,s,l=0;if(it.isFunction(t))return this.each(function(e){it(this).addClass(t.call(this,e,M(this)))});if("string"==typeof t&&t)for(e=t.match(yt)||[];n=this[l++];)if(o=M(n),i=1===n.nodeType&&(" "+o+" ").replace(ce," ")){for(a=0;r=e[a++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");o!==(s=it.trim(i))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,i,o,r,a,s,l=0;if(it.isFunction(t))return this.each(function(e){it(this).removeClass(t.call(this,e,M(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(yt)||[];n=this[l++];)if(o=M(n),i=1===n.nodeType&&(" "+o+" ").replace(ce," ")){for(a=0;r=e[a++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");o!==(s=it.trim(i))&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):it.isFunction(t)?this.each(function(n){it(this).toggleClass(t.call(this,n,M(this),e),e)}):this.each(function(){var e,i,o,r;if("string"===n)for(i=0,o=it(this),r=t.match(yt)||[];e=r[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=M(this))&&Ct.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Ct.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+M(n)+" ").replace(ce," ").indexOf(e)>-1)return!0;return!1}});var ue=/\r/g,de=/[\x20\t\r\n\f]+/g;it.fn.extend({val:function(t){var e,n,i,o=this[0];{if(arguments.length)return i=it.isFunction(t),this.each(function(n){var o;1===this.nodeType&&(null==(o=i?t.call(this,n,it(this).val()):t)?o="":"number"==typeof o?o+="":it.isArray(o)&&(o=it.map(o,function(t){return null==t?"":t+""})),(e=it.valHooks[this.type]||it.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))});if(o)return(e=it.valHooks[o.type]||it.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(ue,""):null==n?"":n}}}),it.extend({valHooks:{option:{get:function(t){var e=it.find.attr(t,"value");return null!=e?e:it.trim(it.text(t)).replace(de," ")}},select:{get:function(t){for(var e,n,i=t.options,o=t.selectedIndex,r="select-one"===t.type||o<0,a=r?null:[],s=r?o+1:i.length,l=o<0?s:r?o:0;l<s;l++)if(((n=i[l]).selected||l===o)&&(nt.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!it.nodeName(n.parentNode,"optgroup"))){if(e=it(n).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var n,i,o=t.options,r=it.makeArray(e),a=o.length;a--;)((i=o[a]).selected=it.inArray(it.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(t.selectedIndex=-1),r}}}}),it.each(["radio","checkbox"],function(){it.valHooks[this]={set:function(t,e){if(it.isArray(e))return t.checked=it.inArray(it(t).val(),e)>-1}},nt.checkOn||(it.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var fe=/^(?:focusinfocus|focusoutblur)$/;it.extend(it.event,{trigger:function(e,n,i,o){var r,a,s,l,c,u,d,f=[i||X],h=et.call(e,"type")?e.type:e,p=et.call(e,"namespace")?e.namespace.split("."):[];if(a=s=i=i||X,3!==i.nodeType&&8!==i.nodeType&&!fe.test(h+it.event.triggered)&&(h.indexOf(".")>-1&&(h=(p=h.split(".")).shift(),p.sort()),c=h.indexOf(":")<0&&"on"+h,e=e[it.expando]?e:new it.Event(h,"object"==typeof e&&e),e.isTrigger=o?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:it.makeArray(n,[e]),d=it.event.special[h]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!it.isWindow(i)){for(l=d.delegateType||h,fe.test(l+h)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(i.ownerDocument||X)&&f.push(s.defaultView||s.parentWindow||t)}for(r=0;(a=f[r++])&&!e.isPropagationStopped();)e.type=r>1?l:d.bindType||h,(u=(Ct.get(a,"events")||{})[e.type]&&Ct.get(a,"handle"))&&u.apply(a,n),(u=c&&a[c])&&u.apply&&xt(a)&&(e.result=u.apply(a,n),!1===e.result&&e.preventDefault());return e.type=h,o||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),n)||!xt(i)||c&&it.isFunction(i[h])&&!it.isWindow(i)&&((s=i[c])&&(i[c]=null),it.event.triggered=h,i[h](),it.event.triggered=void 0,s&&(i[c]=s)),e.result}},simulate:function(t,e,n){var i=it.extend(new it.Event,n,{type:t,isSimulated:!0});it.event.trigger(i,null,e)}}),it.fn.extend({trigger:function(t,e){return this.each(function(){it.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return it.event.trigger(t,e,n,!0)}}),it.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){it.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),it.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),nt.focusin="onfocusin"in t,nt.focusin||it.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){it.event.simulate(e,t.target,it.event.fix(t))};it.event.special[e]={setup:function(){var i=this.ownerDocument||this,o=Ct.access(i,e);o||i.addEventListener(t,n,!0),Ct.access(i,e,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=Ct.access(i,e)-1;o?Ct.access(i,e,o):(i.removeEventListener(t,n,!0),Ct.remove(i,e))}}});var he=t.location,pe=it.now(),ge=/\?/;it.parseJSON=function(t){return JSON.parse(t+"")},it.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||it.error("Invalid XML: "+e),n};var me=/#.*$/,ve=/([?&])_=[^&]*/,ye=/^(.*?):[ \t]*([^\r\n]*)$/gm,be=/^(?:GET|HEAD)$/,we=/^\/\//,xe={},Ce={},Se="*/".concat("*"),_e=X.createElement("a");_e.href=he.href,it.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:he.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(he.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Se,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":it.parseJSON,"text xml":it.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?W(W(t,it.ajaxSettings),e):W(it.ajaxSettings,t)},ajaxPrefilter:j(xe),ajaxTransport:j(Ce),ajax:function(e,n){function i(e,n,i,s){var c,d,y,b,x,S=n;2!==w&&(w=2,l&&t.clearTimeout(l),o=void 0,a=s||"",C.readyState=e>0?4:0,c=e>=200&&e<300||304===e,i&&(b=U(f,C,i)),b=q(f,b,C,c),c?(f.ifModified&&((x=C.getResponseHeader("Last-Modified"))&&(it.lastModified[r]=x),(x=C.getResponseHeader("etag"))&&(it.etag[r]=x)),204===e||"HEAD"===f.type?S="nocontent":304===e?S="notmodified":(S=b.state,d=b.data,c=!(y=b.error))):(y=S,!e&&S||(S="error",e<0&&(e=0))),C.status=e,C.statusText=(n||S)+"",c?g.resolveWith(h,[d,S,C]):g.rejectWith(h,[C,S,y]),C.statusCode(v),v=void 0,u&&p.trigger(c?"ajaxSuccess":"ajaxError",[C,f,c?d:y]),m.fireWith(h,[C,S]),u&&(p.trigger("ajaxComplete",[C,f]),--it.active||it.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var o,r,a,s,l,c,u,d,f=it.ajaxSetup({},n),h=f.context||f,p=f.context&&(h.nodeType||h.jquery)?it(h):it.event,g=it.Deferred(),m=it.Callbacks("once memory"),v=f.statusCode||{},y={},b={},w=0,x="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!s)for(s={};e=ye.exec(a);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?a:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return w||(t=b[n]=b[n]||t,y[t]=e),this},overrideMimeType:function(t){return w||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(w<2)for(e in t)v[e]=[v[e],t[e]];else C.always(t[C.status]);return this},abort:function(t){var e=t||x;return o&&o.abort(e),i(0,e),this}};if(g.promise(C).complete=m.add,C.success=C.done,C.error=C.fail,f.url=((e||f.url||he.href)+"").replace(me,"").replace(we,he.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=it.trim(f.dataType||"*").toLowerCase().match(yt)||[""],null==f.crossDomain){c=X.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=_e.protocol+"//"+_e.host!=c.protocol+"//"+c.host}catch(t){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=it.param(f.data,f.traditional)),H(xe,f,n,C),2===w)return C;(u=it.event&&f.global)&&0==it.active++&&it.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!be.test(f.type),r=f.url,f.hasContent||(f.data&&(r=f.url+=(ge.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(f.url=ve.test(r)?r.replace(ve,"$1_="+pe++):r+(ge.test(r)?"&":"?")+"_="+pe++)),f.ifModified&&(it.lastModified[r]&&C.setRequestHeader("If-Modified-Since",it.lastModified[r]),it.etag[r]&&C.setRequestHeader("If-None-Match",it.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||n.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Se+"; q=0.01":""):f.accepts["*"]);for(d in f.headers)C.setRequestHeader(d,f.headers[d]);if(f.beforeSend&&(!1===f.beforeSend.call(h,C,f)||2===w))return C.abort();x="abort";for(d in{success:1,error:1,complete:1})C[d](f[d]);if(o=H(Ce,f,n,C)){if(C.readyState=1,u&&p.trigger("ajaxSend",[C,f]),2===w)return C;f.async&&f.timeout>0&&(l=t.setTimeout(function(){C.abort("timeout")},f.timeout));try{w=1,o.send(y,i)}catch(t){if(!(w<2))throw t;i(-1,t)}}else i(-1,"No Transport");return C},getJSON:function(t,e,n){return it.get(t,e,n,"json")},getScript:function(t,e){return it.get(t,void 0,e,"script")}}),it.each(["get","post"],function(t,e){it[e]=function(t,n,i,o){return it.isFunction(n)&&(o=o||i,i=n,n=void 0),it.ajax(it.extend({url:t,type:e,dataType:o,data:n,success:i},it.isPlainObject(t)&&t))}}),it._evalUrl=function(t){return it.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,throws:!0})},it.fn.extend({wrapAll:function(t){var e;return it.isFunction(t)?this.each(function(e){it(this).wrapAll(t.call(this,e))}):(this[0]&&(e=it(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return it.isFunction(t)?this.each(function(e){it(this).wrapInner(t.call(this,e))}):this.each(function(){var e=it(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=it.isFunction(t);return this.each(function(n){it(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){it.nodeName(this,"body")||it(this).replaceWith(this.childNodes)}).end()}}),it.expr.filters.hidden=function(t){return!it.expr.filters.visible(t)},it.expr.filters.visible=function(t){return t.offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0};var Ae=/%20/g,Te=/\[\]$/,Ee=/\r?\n/g,Ie=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;it.param=function(t,e){var n,i=[],o=function(t,e){e=it.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=it.ajaxSettings&&it.ajaxSettings.traditional),it.isArray(t)||t.jquery&&!it.isPlainObject(t))it.each(t,function(){o(this.name,this.value)});else for(n in t)G(n,t[n],e,o);return i.join("&").replace(Ae,"+")},it.fn.extend({serialize:function(){return it.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=it.prop(this,"elements");return t?it.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!it(this).is(":disabled")&&De.test(this.nodeName)&&!Ie.test(t)&&(this.checked||!Ot.test(t))}).map(function(t,e){var n=it(this).val();return null==n?null:it.isArray(n)?it.map(n,function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}}):{name:e.name,value:n.replace(Ee,"\r\n")}}).get()}}),it.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(t){}};var Oe={0:200,1223:204},Ne=it.ajaxSettings.xhr();nt.cors=!!Ne&&"withCredentials"in Ne,nt.ajax=Ne=!!Ne,it.ajaxTransport(function(e){var n,i;if(nt.cors||Ne&&!e.crossDomain)return{send:function(o,r){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(a in o)s.setRequestHeader(a,o[a]);n=function(t){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?r(0,"error"):r(s.status,s.statusText):r(Oe[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(e.hasContent&&e.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),it.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return it.globalEval(t),t}}}),it.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),it.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,o){e=it("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),X.head.appendChild(e[0])},abort:function(){n&&n()}}}});var ke=[],Pe=/(=)\?(?=&|$)|\?\?/;it.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ke.pop()||it.expando+"_"+pe++;return this[t]=!0,t}}),it.ajaxPrefilter("json jsonp",function(e,n,i){var o,r,a,s=!1!==e.jsonp&&(Pe.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Pe.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=it.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Pe,"$1"+o):!1!==e.jsonp&&(e.url+=(ge.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||it.error(o+" was not called"),a[0]},e.dataTypes[0]="json",r=t[o],t[o]=function(){a=arguments},i.always(function(){void 0===r?it(t).removeProp(o):t[o]=r,e[o]&&(e.jsonpCallback=n.jsonpCallback,ke.push(o)),a&&it.isFunction(r)&&r(a[0]),a=r=void 0}),"script"}),it.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||X;var i=ft.exec(t),o=!n&&[];return i?[e.createElement(i[1])]:(i=f([t],e,o),o&&o.length&&it(o).remove(),it.merge([],i.childNodes))};var Re=it.fn.load;it.fn.load=function(t,e,n){if("string"!=typeof t&&Re)return Re.apply(this,arguments);var i,o,r,a=this,s=t.indexOf(" ");return s>-1&&(i=it.trim(t.slice(s)),t=t.slice(0,s)),it.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),a.length>0&&it.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){r=arguments,a.html(i?it("<div>").append(it.parseHTML(t)).find(i):t)}).always(n&&function(t,e){a.each(function(){n.apply(this,r||[t.responseText,e,t])})}),this},it.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){it.fn[e]=function(t){return this.on(e,t)}}),it.expr.filters.animated=function(t){return it.grep(it.timers,function(e){return t===e.elem}).length},it.offset={setOffset:function(t,e,n){var i,o,r,a,s,l,c=it.css(t,"position"),u=it(t),d={};"static"===c&&(t.style.position="relative"),s=u.offset(),r=it.css(t,"top"),l=it.css(t,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(a=(i=u.position()).top,o=i.left):(a=parseFloat(r)||0,o=parseFloat(l)||0),it.isFunction(e)&&(e=e.call(t,n,it.extend({},s))),null!=e.top&&(d.top=e.top-s.top+a),null!=e.left&&(d.left=e.left-s.left+o),"using"in e?e.using.call(t,d):u.css(d)}},it.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){it.offset.setOffset(this,t,e)});var e,n,i=this[0],o={top:0,left:0},r=i&&i.ownerDocument;if(r)return e=r.documentElement,it.contains(e,i)?(o=i.getBoundingClientRect(),n=z(r),{top:o.top+n.pageYOffset-e.clientTop,left:o.left+n.pageXOffset-e.clientLeft}):o},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===it.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),it.nodeName(t[0],"html")||(i=t.offset()),i.top+=it.css(t[0],"borderTopWidth",!0),i.left+=it.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-it.css(n,"marginTop",!0),left:e.left-i.left-it.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===it.css(t,"position");)t=t.offsetParent;return t||Yt})}}),it.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;it.fn[t]=function(i){return wt(this,function(t,i,o){var r=z(t);if(void 0===o)return r?r[e]:t[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):t[i]=o},t,i,arguments.length)}}),it.each(["top","left"],function(t,e){it.cssHooks[e]=E(nt.pixelPosition,function(t,n){if(n)return n=T(t,e),zt.test(n)?it(t).position()[e]+"px":n})}),it.each({Height:"height",Width:"width"},function(t,e){it.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){it.fn[i]=function(i,o){var r=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return wt(this,function(e,n,i){var o;return it.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?it.css(e,n,a):it.style(e,n,i,a)},e,r?i:void 0,r,null)}})}),it.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},size:function(){return this.length}}),it.fn.andSelf=it.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return it});var Be=t.jQuery,$e=t.$;return it.noConflict=function(e){return t.$===it&&(t.$=$e),e&&t.jQuery===it&&(t.jQuery=Be),it},e||(t.jQuery=t.$=it),it}),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";var e=window.CoreSlider||{};e=function(e,n){function i(t){for(var e=document.createElement("div"),n="",i=0;i<t.length;i++){if(void 0!==e.style[t[i]]){n=t[i];break}n=null}return n}function o(t){return"translateX("+t+"px)"}function r(){l=f.width()/u.settings.items,p.add(g).css("width",l),h.css("width",l*(x+2*u.settings.cloneItems+1))}this.settings=t.extend({},{interval:5e3,loop:!0,slideshow:!0,resize:!0,pauseOnHover:!0,startOnHover:!1,sliderSelector:".core-slider_list",viewportSelector:".core-slider_viewport",itemSelector:".core-slider_item",navEnabled:!0,navSelector:".core-slider_nav",navItemNextSelector:".core-slider_arrow__right",navItemPrevSelector:".core-slider_arrow__left",controlNavEnabled:!1,controlNavSelector:".core-slider_control-nav",controlNavItemSelector:"core-slider_control-nav-item",loadedClass:"is-loaded",clonedClass:"is-cloned",hiddenClass:"is-hidden",disabledClass:"is-disabled",activeClass:"is-active",reloadGif:!1,clone:!1,items:1,itemsPerSlide:1,cloneItems:0,before:function(){},after:function(){},init:function(){}},n);var a,s,l,c,u=this,d=t(e),f=d.find(u.settings.viewportSelector),h=d.find(u.settings.sliderSelector),p=d.find(u.settings.itemSelector),g=null,m=d.find(u.settings.navSelector),v=d.find(u.settings.navItemPrevSelector),y=d.find(u.settings.navItemNextSelector),b=v.add(y),w=d.find(u.settings.controlNavSelector),x=p.length-1,C=p.length,S=0,_=i(["transform","msTransform","MozTransform","WebkitTransform"]),A=i(["transition","msTransition","MozTransition","WebkitTransition"]),T=!0,E={};t.data(e,"coreslider",this),this.init=function(){d.addClass(u.settings.loadedClass),u.settings.clone&&(h.append(p.slice(0,u.settings.cloneItems).clone().addClass(u.settings.clonedClass)),h.prepend(p.slice(x-u.settings.cloneItems+1,x+1).clone().addClass(u.settings.clonedClass)),g=d.find(u.settings.itemSelector).filter("."+u.settings.clonedClass)),r(),u.setSlide(S,!0,!1),u.settings.slideshow&&u.play(),u.settings.resize&&u.resize(),u.settings.pauseOnHover&&u.settings.slideshow&&(d.mouseenter(function(){u.stop()}),d.mouseleave(function(){u.play()})),u.settings.startOnHover&&u.settings.slideshow&&(d.mouseenter(function(){u.play()}),d.mouseleave(function(){u.stop()})),u.settings.navEnabled?(v.on("click",function(){t(this).hasClass(u.settings.disabledClass)||u.setSlide(S-u.settings.itemsPerSlide,!0,!0)}),y.on("click",function(){t(this).hasClass(u.settings.disabledClass)||u.setSlide(S+u.settings.itemsPerSlide,!0,!0)}),u.settings.loop||(0===S&&v.addClass(u.settings.disabledClass),S+u.settings.itemsPerSlide>C&&y.addClass(u.settings.disabledClass))):m.addClass(u.settings.hiddenClass),u.settings.controlNavEnabled?(u.setControlNav(),w.on("click",s,function(e){u.setSlide(t(e.target).index(),!0,!1)})):w.addClass(u.settings.hiddenClass),h.on("transitionend",function(){u.settings.after(u)}),u.settings.init(u)},this.setControlNav=function(){for(var t=[],e=0;e<x+1;e++)e===S?t.push('<div class="'+u.settings.controlNavItemSelector+" "+u.settings.activeClass+'"></div>'):t.push('<div class="'+u.settings.controlNavItemSelector+'"></div>');w.empty().append(t.join("")),s=w.children()},this.update=function(){p=d.find(u.settings.itemSelector),x=p.length-1,C=p.length,r(),S+u.settings.itemsPerSlide>C&&(S=C-u.settings.itemsPerSlide),C<u.settings.items&&(S=0),u.setSlide(S,!1,!1),u.settings.controlNavEnabled&&u.setControlNav()},this.setSlide=function(e,n,i){u.settings.before(u),u.stop(),T?C<u.settings.items&&b.addClass(u.settings.disabledClass):C>u.settings.items?(b.removeClass(u.settings.disabledClass),S-e<0?(e===C&&u.settings.loop&&(e=0),e+u.settings.itemsPerSlide>C&&(e=C-u.settings.items,u.settings.loop||y.addClass(u.settings.disabledClass))):(e+u.settings.itemsPerSlide===0&&(e=C-u.settings.items),e<0&&(e=0,u.settings.loop||v.addClass(u.settings.disabledClass))),u.settings.reloadGif&&p.eq(e).find("img").each(function(){var e=t(this),n=e.attr("src");e.attr("src",""),e.attr("src",n)})):b.addClass(u.settings.disabledClass),u.settings.controlNavEnabled&&void 0!==s&&(s.removeClass(u.settings.activeClass),s.eq(e).addClass(u.settings.activeClass)),n?h.css(_,o(-(e+u.settings.cloneItems)*l)):(E[A]="none",E[_]=o(-(e+u.settings.cloneItems)*l),h.css(E),setTimeout(function(){h.css(A,"")},1)),S=e,T=!1},this.resize=function(){t(window).resize(function(){c&&(clearTimeout(c),c=null),c=setTimeout(function(){r(),u.setSlide(S,!0,!1)},250)})},this.destroy=function(){d.removeClass(u.settings.loadedClass),clearInterval(a)},this.play=function(){a=setInterval(function(){x+1!==u.settings.itemsPerSlide&&u.setSlide(S+u.settings.itemsPerSlide,!0,!0),u.play()},u.settings.interval)},this.stop=function(){clearInterval(a)},this.getCurrentSlideIndex=function(){return S},this.init()},t.fn.coreSlider=function(n){if(void 0===n&&(n={}),"object"==typeof n)return this.each(function(){new e(this,n)});var i=t(this).data("coreslider");switch(n){case"update":i.update();break;case"play":i.play();break;case"stop":i.stop();break;case"destroy":i.destroy();break;case"next":i.setSlide(i.getCurrentSlideIndex()+1,!0,!0);break;case"prev":i.setSlide(i.getCurrentSlideIndex()-1,!0,!0);break;default:"number"==typeof n&&i.setSlide(n,!0,!0)}}});var Util=function(){function t(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function e(){return{bindType:o.end,delegateType:o.end,handle:function(t){if($(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}}}function n(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in r)if(void 0!==t.style[e])return{end:r[e]};return!1}function i(t){var e=this,n=!1;return $(this).one(a.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||a.triggerTransitionEnd(e)},t),this}var o=!1,r={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},a={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return $(document).find(e).length>0?e:null}catch(t){return null}},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){$(t).trigger(o.end)},supportsTransitionEnd:function(){return Boolean(o)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(e,n,i){for(var o in i)if(Object.prototype.hasOwnProperty.call(i,o)){var r=i[o],s=n[o],l=s&&a.isElement(s)?"element":t(s);if(!new RegExp(r).test(l))throw new Error(e.toUpperCase()+': Option "'+o+'" provided type "'+l+'" but expected type "'+r+'".')}}};return o=n(),$.fn.emulateTransitionEnd=i,a.supportsTransitionEnd()&&($.event.special[a.TRANSITION_END]=e()),a}($),Modal=function(){var t="modal",e=".bs.modal",n=$.fn.modal,i={backdrop:!0,keyboard:!0,focus:!0,show:!0},o={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},r={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},a={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},s={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"},l=function(){function n(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=$(t).find(s.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}var l=n.prototype;return l.toggle=function(t){return this._isShown?this.hide():this.show(t)},l.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){Util.supportsTransitionEnd()&&$(this._element).hasClass(a.FADE)&&(this._isTransitioning=!0);var n=$.Event(r.SHOW,{relatedTarget:t});$(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),$(document.body).addClass(a.OPEN),this._setEscapeEvent(),this._setResizeEvent(),$(this._element).on(r.CLICK_DISMISS,s.DATA_DISMISS,function(t){return e.hide(t)}),$(this._dialog).on(r.MOUSEDOWN_DISMISS,function(){$(e._element).one(r.MOUSEUP_DISMISS,function(t){$(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},l.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=$.Event(r.HIDE);if($(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=Util.supportsTransitionEnd()&&$(this._element).hasClass(a.FADE);i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),$(document).off(r.FOCUSIN),$(this._element).removeClass(a.SHOW),$(this._element).off(r.CLICK_DISMISS),$(this._dialog).off(r.MOUSEDOWN_DISMISS),i?$(this._element).one(Util.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(300):this._hideModal()}}},l.dispose=function(){$.removeData(this._element,"bs.modal"),$(window,document,this._element,this._backdrop).off(e),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},l.handleUpdate=function(){this._adjustDialog()},l._getConfig=function(e){return e=$.extend({},i,e),Util.typeCheckConfig(t,e,o),e},l._showElement=function(t){var e=this,n=Util.supportsTransitionEnd()&&$(this._element).hasClass(a.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&Util.reflow(this._element),$(this._element).addClass(a.SHOW),this._config.focus&&this._enforceFocus();var i=$.Event(r.SHOWN,{relatedTarget:t}),o=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,$(e._element).trigger(i)};n?$(this._dialog).one(Util.TRANSITION_END,o).emulateTransitionEnd(300):o()},l._enforceFocus=function(){var t=this;$(document).off(r.FOCUSIN).on(r.FOCUSIN,function(e){document===e.target||t._element===e.target||$(t._element).has(e.target).length||t._element.focus()})},l._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?$(this._element).on(r.KEYDOWN_DISMISS,function(e){27===e.which&&(e.preventDefault(),t.hide())}):this._isShown||$(this._element).off(r.KEYDOWN_DISMISS)},l._setResizeEvent=function(){var t=this;this._isShown?$(window).on(r.RESIZE,function(e){return t.handleUpdate(e)}):$(window).off(r.RESIZE)},l._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){$(document.body).removeClass(a.OPEN),t._resetAdjustments(),t._resetScrollbar(),$(t._element).trigger(r.HIDDEN)})},l._removeBackdrop=function(){this._backdrop&&($(this._backdrop).remove(),this._backdrop=null)},l._showBackdrop=function(t){var e=this,n=$(this._element).hasClass(a.FADE)?a.FADE:"";if(this._isShown&&this._config.backdrop){var i=Util.supportsTransitionEnd()&&n;if(this._backdrop=document.createElement("div"),this._backdrop.className=a.BACKDROP,n&&$(this._backdrop).addClass(n),$(this._backdrop).appendTo(document.body),$(this._element).on(r.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),i&&Util.reflow(this._backdrop),$(this._backdrop).addClass(a.SHOW),!t)return;if(!i)return void t();$(this._backdrop).one(Util.TRANSITION_END,t).emulateTransitionEnd(150)}else if(!this._isShown&&this._backdrop){$(this._backdrop).removeClass(a.SHOW);var o=function(){e._removeBackdrop(),t&&t()};Util.supportsTransitionEnd()&&$(this._element).hasClass(a.FADE)?$(this._backdrop).one(Util.TRANSITION_END,o).emulateTransitionEnd(150):o()}else t&&t()},l._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},l._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},l._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},l._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){$(s.FIXED_CONTENT).each(function(e,n){var i=$(n)[0].style.paddingRight,o=$(n).css("padding-right");$(n).data("padding-right",i).css("padding-right",parseFloat(o)+t._scrollbarWidth+"px")}),$(s.STICKY_CONTENT).each(function(e,n){var i=$(n)[0].style.marginRight,o=$(n).css("margin-right");$(n).data("margin-right",i).css("margin-right",parseFloat(o)-t._scrollbarWidth+"px")}),$(s.NAVBAR_TOGGLER).each(function(e,n){var i=$(n)[0].style.marginRight,o=$(n).css("margin-right");$(n).data("margin-right",i).css("margin-right",parseFloat(o)+t._scrollbarWidth+"px")});var e=document.body.style.paddingRight,n=$("body").css("padding-right");$("body").data("padding-right",e).css("padding-right",parseFloat(n)+this._scrollbarWidth+"px")}},l._resetScrollbar=function(){$(s.FIXED_CONTENT).each(function(t,e){var n=$(e).data("padding-right");void 0!==n&&$(e).css("padding-right",n).removeData("padding-right")}),$(s.STICKY_CONTENT+", "+s.NAVBAR_TOGGLER).each(function(t,e){var n=$(e).data("margin-right");void 0!==n&&$(e).css("margin-right",n).removeData("margin-right")});var t=$("body").data("padding-right");void 0!==t&&$("body").css("padding-right",t).removeData("padding-right")},l._getScrollbarWidth=function(){var t=document.createElement("div");t.className=a.SCROLLBAR_MEASURER,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},n._jQueryInterface=function(t,e){return this.each(function(){var i=$(this).data("bs.modal"),o=$.extend({},n.Default,$(this).data(),"object"==typeof t&&t);if(i||(i=new n(this,o),$(this).data("bs.modal",i)),"string"==typeof t){if(void 0===i[t])throw new Error('No method named "'+t+'"');i[t](e)}else o.show&&i.show(e)})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return i}}]),n}();return $(document).on(r.CLICK_DATA_API,s.DATA_TOGGLE,function(t){var e,n=this,i=Util.getSelectorFromElement(this);i&&(e=$(i)[0]);var o=$(e).data("bs.modal")?"toggle":$.extend({},$(e).data(),$(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var a=$(e).one(r.SHOW,function(t){t.isDefaultPrevented()||a.one(r.HIDDEN,function(){$(n).is(":visible")&&n.focus()})});l._jQueryInterface.call($(e),o,this)}),$.fn.modal=l._jQueryInterface,$.fn.modal.Constructor=l,$.fn.modal.noConflict=function(){return $.fn.modal=n,l._jQueryInterface},l}($),Collapse=function(){var t="collapse",e="bs.collapse",n=$.fn[t],i={toggle:!0,parent:""},o={toggle:"boolean",parent:"(string|element)"},r={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},a={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},s={WIDTH:"width",HEIGHT:"height"},l={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},c=function(){function n(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=$.makeArray($('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=$(l.DATA_TOGGLE),i=0;i<n.length;i++){var o=n[i],r=Util.getSelectorFromElement(o);null!==r&&$(r).filter(t).length>0&&this._triggerArray.push(o)}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var c=n.prototype;return c.toggle=function(){$(this._element).hasClass(a.SHOW)?this.hide():this.show()},c.show=function(){var t=this;if(!this._isTransitioning&&!$(this._element).hasClass(a.SHOW)){var i,o;if(this._parent&&((i=$.makeArray($(this._parent).children().children(l.ACTIVES))).length||(i=null)),!(i&&(o=$(i).data(e))&&o._isTransitioning)){var s=$.Event(r.SHOW);if($(this._element).trigger(s),!s.isDefaultPrevented()){i&&(n._jQueryInterface.call($(i),"hide"),o||$(i).data(e,null));var c=this._getDimension();$(this._element).removeClass(a.COLLAPSE).addClass(a.COLLAPSING),this._element.style[c]=0,this._triggerArray.length&&$(this._triggerArray).removeClass(a.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var u=function(){$(t._element).removeClass(a.COLLAPSING).addClass(a.COLLAPSE).addClass(a.SHOW),t._element.style[c]="",t.setTransitioning(!1),$(t._element).trigger(r.SHOWN)};if(Util.supportsTransitionEnd()){var d="scroll"+(c[0].toUpperCase()+c.slice(1));$(this._element).one(Util.TRANSITION_END,u).emulateTransitionEnd(600),this._element.style[c]=this._element[d]+"px"}else u()}}}},c.hide=function(){var t=this;if(!this._isTransitioning&&$(this._element).hasClass(a.SHOW)){var e=$.Event(r.HIDE);if($(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",Util.reflow(this._element),$(this._element).addClass(a.COLLAPSING).removeClass(a.COLLAPSE).removeClass(a.SHOW),this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var o=this._triggerArray[i],s=Util.getSelectorFromElement(o);null!==s&&($(s).hasClass(a.SHOW)||$(o).addClass(a.COLLAPSED).attr("aria-expanded",!1))}this.setTransitioning(!0);var l=function(){t.setTransitioning(!1),$(t._element).removeClass(a.COLLAPSING).addClass(a.COLLAPSE).trigger(r.HIDDEN)};this._element.style[n]="",Util.supportsTransitionEnd()?$(this._element).one(Util.TRANSITION_END,l).emulateTransitionEnd(600):l()}}},c.setTransitioning=function(t){this._isTransitioning=t},c.dispose=function(){$.removeData(this._element,e),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},c._getConfig=function(e){return e=$.extend({},i,e),e.toggle=Boolean(e.toggle),Util.typeCheckConfig(t,e,o),e},c._getDimension=function(){return $(this._element).hasClass(s.WIDTH)?s.WIDTH:s.HEIGHT},c._getParent=function(){var t=this,e=null;Util.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=$(this._config.parent)[0];var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return $(e).find(i).each(function(e,i){t._addAriaAndCollapsedClass(n._getTargetFromElement(i),[i])}),e},c._addAriaAndCollapsedClass=function(t,e){if(t){var n=$(t).hasClass(a.SHOW);e.length&&$(e).toggleClass(a.COLLAPSED,!n).attr("aria-expanded",n)}},n._getTargetFromElement=function(t){var e=Util.getSelectorFromElement(t);return e?$(e)[0]:null},n._jQueryInterface=function(t){return this.each(function(){var o=$(this),r=o.data(e),a=$.extend({},i,o.data(),"object"==typeof t&&t);if(!r&&a.toggle&&/show|hide/.test(t)&&(a.toggle=!1),r||(r=new n(this,a),o.data(e,r)),"string"==typeof t){if(void 0===r[t])throw new Error('No method named "'+t+'"');r[t]()}})},_createClass(n,null,[{key:"VERSION",get:function(){return"4.0.0-beta.2"}},{key:"Default",get:function(){return i}}]),n}();return $(document).on(r.CLICK_DATA_API,l.DATA_TOGGLE,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=$(this),i=Util.getSelectorFromElement(this);$(i).each(function(){var t=$(this),i=t.data(e)?"toggle":n.data();c._jQueryInterface.call(t,i)})}),$.fn[t]=c._jQueryInterface,$.fn[t].Constructor=c,$.fn[t].noConflict=function(){return $.fn[t]=n,c._jQueryInterface},c}($);+function(t){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var n=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();!function(t){var i="ekkoLightbox",o=t.fn[i],r={title:"",footer:"",maxWidth:9999,maxHeight:9999,showArrows:!0,wrapping:!0,type:null,alwaysShowClose:!1,loadingMessage:'<div class="ekko-lightbox-loader"><div><div></div><div></div></div></div>',leftArrow:"<span>&#10094;</span>",rightArrow:"<span>&#10095;</span>",strings:{close:"Close",fail:"Failed to load image:",type:"Could not detect remote target type. Force the type using data-type"},doc:document,onShow:function(){},onShown:function(){},onHide:function(){},onHidden:function(){},onNavigate:function(){},onContentLoaded:function(){}},a=function(){function i(n,o){var a=this;e(this,i),this._config=t.extend({},r,o),this._$modalArrows=null,this._galleryIndex=0,this._galleryName=null,this._padding=null,this._border=null,this._titleIsShown=!1,this._footerIsShown=!1,this._wantedWidth=0,this._wantedHeight=0,this._touchstartX=0,this._touchendX=0,this._modalId="ekkoLightbox-"+Math.floor(1e3*Math.random()+1),this._$element=n instanceof jQuery?n:t(n),this._isBootstrap3=3==t.fn.modal.Constructor.VERSION[0];var s='<h4 class="modal-title">'+(this._config.title||"&nbsp;")+"</h4>",l='<button type="button" class="close" data-dismiss="modal" aria-label="'+this._config.strings.close+'"><span aria-hidden="true">&times;</span></button>',c='<div class="modal-dialog" role="document"><div class="modal-content">'+('<div class="modal-header'+(this._config.title||this._config.alwaysShowClose?"":" hide")+'">'+(this._isBootstrap3?l+s:s+l)+"</div>")+'<div class="modal-body"><div class="ekko-lightbox-container"><div class="ekko-lightbox-item fade in show"></div><div class="ekko-lightbox-item fade"></div></div></div>'+('<div class="modal-footer'+(this._config.footer?"":" hide")+'">'+(this._config.footer||"&nbsp;")+"</div>")+"</div></div>";t(this._config.doc.body).append('<div id="'+this._modalId+'" class="ekko-lightbox modal fade" tabindex="-1" tabindex="-1" role="dialog" aria-hidden="true">'+c+"</div>"),this._$modal=t("#"+this._modalId,this._config.doc),this._$modalDialog=this._$modal.find(".modal-dialog").first(),this._$modalContent=this._$modal.find(".modal-content").first(),this._$modalBody=this._$modal.find(".modal-body").first(),this._$modalHeader=this._$modal.find(".modal-header").first(),this._$modalFooter=this._$modal.find(".modal-footer").first(),this._$lightboxContainer=this._$modalBody.find(".ekko-lightbox-container").first(),this._$lightboxBodyOne=this._$lightboxContainer.find("> div:first-child").first(),this._$lightboxBodyTwo=this._$lightboxContainer.find("> div:last-child").first(),this._border=this._calculateBorders(),this._padding=this._calculatePadding(),this._galleryName=this._$element.data("gallery"),this._galleryName&&(this._$galleryItems=t(document.body).find('*[data-gallery="'+this._galleryName+'"]'),this._galleryIndex=this._$galleryItems.index(this._$element),t(document).on("keydown.ekkoLightbox",this._navigationalBinder.bind(this)),this._config.showArrows&&this._$galleryItems.length>1&&(this._$lightboxContainer.append('<div class="ekko-lightbox-nav-overlay"><a href="#">'+this._config.leftArrow+'</a><a href="#">'+this._config.rightArrow+"</a></div>"),this._$modalArrows=this._$lightboxContainer.find("div.ekko-lightbox-nav-overlay").first(),this._$lightboxContainer.on("click","a:first-child",function(t){return t.preventDefault(),a.navigateLeft()}),this._$lightboxContainer.on("click","a:last-child",function(t){return t.preventDefault(),a.navigateRight()}),this.updateNavigation())),this._$modal.on("show.bs.modal",this._config.onShow.bind(this)).on("shown.bs.modal",function(){return a._toggleLoading(!0),a._handle(),a._config.onShown.call(a)}).on("hide.bs.modal",this._config.onHide.bind(this)).on("hidden.bs.modal",function(){return a._galleryName&&(t(document).off("keydown.ekkoLightbox"),t(window).off("resize.ekkoLightbox")),a._$modal.remove(),a._config.onHidden.call(a)}).modal(this._config),t(window).on("resize.ekkoLightbox",function(){a._resize(a._wantedWidth,a._wantedHeight)}),this._$lightboxContainer.on("touchstart",function(){a._touchstartX=event.changedTouches[0].screenX}).on("touchend",function(){a._touchendX=event.changedTouches[0].screenX,a._swipeGesure()})}return n(i,null,[{key:"Default",get:function(){return r}}]),n(i,[{key:"element",value:function(){return this._$element}},{key:"modal",value:function(){return this._$modal}},{key:"navigateTo",value:function(e){if(e<0||e>this._$galleryItems.length-1)return this;this._galleryIndex=e,this.updateNavigation(),this._$element=t(this._$galleryItems.get(this._galleryIndex)),this._handle()}},{key:"navigateLeft",value:function(){if(this._$galleryItems&&1!==this._$galleryItems.length){if(0===this._galleryIndex){if(!this._config.wrapping)return;this._galleryIndex=this._$galleryItems.length-1}else this._galleryIndex--;return this._config.onNavigate.call(this,"left",this._galleryIndex),this.navigateTo(this._galleryIndex)}}},{key:"navigateRight",value:function(){if(this._$galleryItems&&1!==this._$galleryItems.length){if(this._galleryIndex===this._$galleryItems.length-1){if(!this._config.wrapping)return;this._galleryIndex=0}else this._galleryIndex++;return this._config.onNavigate.call(this,"right",this._galleryIndex),this.navigateTo(this._galleryIndex)}}},{key:"updateNavigation",value:function(){if(!this._config.wrapping){var t=this._$lightboxContainer.find("div.ekko-lightbox-nav-overlay");0===this._galleryIndex?t.find("a:first-child").addClass("disabled"):t.find("a:first-child").removeClass("disabled"),this._galleryIndex===this._$galleryItems.length-1?t.find("a:last-child").addClass("disabled"):t.find("a:last-child").removeClass("disabled")}}},{key:"close",value:function(){return this._$modal.modal("hide")}},{key:"_navigationalBinder",value:function(t){return 39===(t=t||window.event).keyCode?this.navigateRight():37===t.keyCode?this.navigateLeft():void 0}},{key:"_detectRemoteType",value:function(t,e){return!(e=e||!1)&&this._isImage(t)&&(e="image"),!e&&this._getYoutubeId(t)&&(e="youtube"),!e&&this._getVimeoId(t)&&(e="vimeo"),!e&&this._getInstagramId(t)&&(e="instagram"),(!e||["image","youtube","vimeo","instagram","video","url"].indexOf(e)<0)&&(e="url"),e}},{key:"_isImage",value:function(t){return t&&t.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)}},{key:"_containerToUse",value:function(){var t=this,e=this._$lightboxBodyTwo,n=this._$lightboxBodyOne;return this._$lightboxBodyTwo.hasClass("in")&&(e=this._$lightboxBodyOne,n=this._$lightboxBodyTwo),n.removeClass("in show"),setTimeout(function(){t._$lightboxBodyTwo.hasClass("in")||t._$lightboxBodyTwo.empty(),t._$lightboxBodyOne.hasClass("in")||t._$lightboxBodyOne.empty()},500),e.addClass("in show"),e}},{key:"_handle",value:function(){var t=this._containerToUse();this._updateTitleAndFooter();var e=this._$element.attr("data-remote")||this._$element.attr("href"),n=this._detectRemoteType(e,this._$element.attr("data-type")||!1);if(["image","youtube","vimeo","instagram","video","url"].indexOf(n)<0)return this._error(this._config.strings.type);switch(n){case"image":this._preloadImage(e,t),this._preloadImageByIndex(this._galleryIndex,3);break;case"youtube":this._showYoutubeVideo(e,t);break;case"vimeo":this._showVimeoVideo(this._getVimeoId(e),t);break;case"instagram":this._showInstagramVideo(this._getInstagramId(e),t);break;case"video":this._showHtml5Video(e,t);break;default:this._loadRemoteContent(e,t)}return this}},{key:"_getYoutubeId",value:function(t){if(!t)return!1;var e=t.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/);return!(!e||11!==e[2].length)&&e[2]}},{key:"_getVimeoId",value:function(t){return!!(t&&t.indexOf("vimeo")>0)&&t}},{key:"_getInstagramId",value:function(t){return!!(t&&t.indexOf("instagram")>0)&&t}},{key:"_toggleLoading",value:function(e){return(e=e||!1)?(this._$modalDialog.css("display","none"),this._$modal.removeClass("in show"),t(".modal-backdrop").append(this._config.loadingMessage)):(this._$modalDialog.css("display","block"),this._$modal.addClass("in show"),t(".modal-backdrop").find(".ekko-lightbox-loader").remove()),this}},{key:"_calculateBorders",value:function(){return{top:this._totalCssByAttribute("border-top-width"),right:this._totalCssByAttribute("border-right-width"),bottom:this._totalCssByAttribute("border-bottom-width"),left:this._totalCssByAttribute("border-left-width")}}},{key:"_calculatePadding",value:function(){return{top:this._totalCssByAttribute("padding-top"),right:this._totalCssByAttribute("padding-right"),bottom:this._totalCssByAttribute("padding-bottom"),left:this._totalCssByAttribute("padding-left")}}},{key:"_totalCssByAttribute",value:function(t){return parseInt(this._$modalDialog.css(t),10)+parseInt(this._$modalContent.css(t),10)+parseInt(this._$modalBody.css(t),10)}},{key:"_updateTitleAndFooter",value:function(){var t=this._$element.data("title")||"",e=this._$element.data("footer")||"";return this._titleIsShown=!1,t||this._config.alwaysShowClose?(this._titleIsShown=!0,this._$modalHeader.css("display","").find(".modal-title").html(t||"&nbsp;")):this._$modalHeader.css("display","none"),this._footerIsShown=!1,e?(this._footerIsShown=!0,this._$modalFooter.css("display","").html(e)):this._$modalFooter.css("display","none"),this}},{key:"_showYoutubeVideo",value:function(t,e){var n=this._getYoutubeId(t),i=t.indexOf("&")>0?t.substr(t.indexOf("&")):"",o=this._$element.data("width")||560,r=this._$element.data("height")||o/(560/315);return this._showVideoIframe("//www.youtube.com/embed/"+n+"?badge=0&autoplay=1&html5=1"+i,o,r,e)}},{key:"_showVimeoVideo",value:function(t,e){var n=this._$element.data("width")||500,i=this._$element.data("height")||n/(560/315);return this._showVideoIframe(t+"?autoplay=1",n,i,e)}},{key:"_showInstagramVideo",value:function(t,e){var n=this._$element.data("width")||612,i=n+80;return t="/"!==t.substr(-1)?t+"/":t,e.html('<iframe width="'+n+'" height="'+i+'" src="'+t+'embed/" frameborder="0" allowfullscreen></iframe>'),this._resize(n,i),this._config.onContentLoaded.call(this),this._$modalArrows&&this._$modalArrows.css("display","none"),this._toggleLoading(!1),this}},{key:"_showVideoIframe",value:function(t,e,n,i){return n=n||e,i.html('<div class="embed-responsive embed-responsive-16by9"><iframe width="'+e+'" height="'+n+'" src="'+t+'" frameborder="0" allowfullscreen class="embed-responsive-item"></iframe></div>'),this._resize(e,n),this._config.onContentLoaded.call(this),this._$modalArrows&&this._$modalArrows.css("display","none"),this._toggleLoading(!1),this}},{key:"_showHtml5Video",value:function(t,e){var n=this._$element.data("width")||560,i=this._$element.data("height")||n/(560/315);return e.html('<div class="embed-responsive embed-responsive-16by9"><video width="'+n+'" height="'+i+'" src="'+t+'" preload="auto" autoplay controls class="embed-responsive-item"></video></div>'),this._resize(n,i),this._config.onContentLoaded.call(this),this._$modalArrows&&this._$modalArrows.css("display","none"),this._toggleLoading(!1),this}},{key:"_loadRemoteContent",value:function(e,n){var i=this,o=this._$element.data("width")||560,r=this._$element.data("height")||560,a=this._$element.data("disableExternalCheck")||!1;return this._toggleLoading(!1),a||this._isExternal(e)?(n.html('<iframe src="'+e+'" frameborder="0" allowfullscreen></iframe>'),this._config.onContentLoaded.call(this)):n.load(e,t.proxy(function(){return i._$element.trigger("loaded.bs.modal")})),this._$modalArrows&&this._$modalArrows.css("display","none"),this._resize(o,r),this}},{key:"_isExternal",value:function(t){var e=t.match(/^([^:\/?#]+:)?(?:\/\/([^\/?#]*))?([^?#]+)?(\?[^#]*)?(#.*)?/);return"string"==typeof e[1]&&e[1].length>0&&e[1].toLowerCase()!==location.protocol||"string"==typeof e[2]&&e[2].length>0&&e[2].replace(new RegExp(":("+{"http:":80,"https:":443}[location.protocol]+")?$"),"")!==location.host}},{key:"_error",value:function(t){return console.error(t),this._containerToUse().html(t),this._resize(300,300),this}},{key:"_preloadImageByIndex",value:function(e,n){if(this._$galleryItems){var i=t(this._$galleryItems.get(e),!1);if(void 0!==i){var o=i.attr("data-remote")||i.attr("href");return("image"===i.attr("data-type")||this._isImage(o))&&this._preloadImage(o,!1),n>0?this._preloadImageByIndex(e+1,n-1):void 0}}}},{key:"_preloadImage",value:function(e,n){var i=this;n=n||!1;var o=new Image;return n&&function(){var r=setTimeout(function(){n.append(i._config.loadingMessage)},200);o.onload=function(){r&&clearTimeout(r),r=null;var e=t("<img />");return e.attr("src",o.src),e.addClass("img-fluid"),e.css("width","100%"),n.html(e),i._$modalArrows&&i._$modalArrows.css("display",""),i._resize(o.width,o.height),i._toggleLoading(!1),i._config.onContentLoaded.call(i)},o.onerror=function(){return i._toggleLoading(!1),i._error(i._config.strings.fail+"  "+e)}}(),o.src=e,o}},{key:"_swipeGesure",value:function(){return this._touchendX<this._touchstartX?this.navigateRight():this._touchendX>this._touchstartX?this.navigateLeft():void 0}},{key:"_resize",value:function(e,n){n=n||e,this._wantedWidth=e,this._wantedHeight=n;var i=e/n,o=this._padding.left+this._padding.right+this._border.left+this._border.right,r=this._config.doc.body.clientWidth>575?20:0,a=this._config.doc.body.clientWidth>575?0:20,s=Math.min(e+o,this._config.doc.body.clientWidth-r,this._config.maxWidth);e+o>s?(n=(s-o-a)/i,e=s):e+=o;var l=0,c=0;this._footerIsShown&&(c=this._$modalFooter.outerHeight(!0)||55),this._titleIsShown&&(l=this._$modalHeader.outerHeight(!0)||67);var u=this._padding.top+this._padding.bottom+this._border.bottom+this._border.top,d=parseFloat(this._$modalDialog.css("margin-top"))+parseFloat(this._$modalDialog.css("margin-bottom")),f=Math.min(n,t(window).height()-u-d-l-c,this._config.maxHeight-u-l-c);n>f&&(e=Math.ceil(f*i)+o),this._$lightboxContainer.css("height",f),this._$modalDialog.css("flex",1).css("maxWidth",e);var h=this._$modal.data("bs.modal");if(h)try{h._handleUpdate()}catch(t){h.handleUpdate()}return this}}],[{key:"_jQueryInterface",value:function(e){var n=this;return e=e||{},this.each(function(){var o=t(n),r=t.extend({},i.Default,o.data(),"object"==typeof e&&e);new i(n,r)})}}]),i}();t.fn[i]=a._jQueryInterface,t.fn[i].Constructor=a,t.fn[i].noConflict=function(){return t.fn[i]=o,a._jQueryInterface}}(jQuery)}(jQuery),function(t){"use strict";var e=null,n=null;!function(){var e=["webkit","moz","o","ms"],n=t.document.createElement("div"),i=-1;for(i=0;i<e.length&&!t.requestAnimationFrame;i++)t.requestAnimationFrame=t[e[i]+"RequestAnimationFrame"];void 0===n.nextElementSibling&&Object.defineProperty(t.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),function(t){t.matches=t.matches||t.machesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector||function(t){return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)>-1}}(t.Element.prototype),Object.keys||(Object.keys=function(){var t=Object.prototype.hasOwnProperty,e=!1,n=[],i=-1;return e=!{toString:null}.propertyIsEnumerable("toString"),n=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],i=n.length,function(o){var r=[],a="",s=-1;if("object"!=typeof o&&("function"!=typeof o||null===o))throw new TypeError("Object.keys called on non-object");for(a in o)t.call(o,a)&&r.push(a);if(e)for(s=0;s<i;s++)t.call(o,n[s])&&r.push(n[s]);return r}}()),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t){var e=function(){};return function(t,n){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");e.prototype=t||{};var i=new e;return e.prototype=null,void 0!==n&&Object.defineProperties(i,n),null===t&&(i.__proto__=null),i}}()),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,n,i,o;if(null===this)throw new TypeError;if(i=Object(this),0===(o=i.length>>>0))return-1;if(e=0,arguments.length>1&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(e>0||-1)*Math.floor(Math.abs(e)))),e>=o)return-1;for(n=e>=0?e:Math.max(o-Math.abs(e),0);n<o;n++)if(n in i&&i[n]===t)return n;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,n,i,o;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),n=this,i=function(){},o=function(){return n.apply(this instanceof i?this:t,e.concat(Array.prototype.slice.call(arguments)))},this.prototype&&(i.prototype=this.prototype),o.prototype=new i,o}),t.Element.prototype.dispatchEvent||(t.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}})}(),(e=function(i,o,r){var a=null,s=!1,l=null,c=null,u=null,d=[],f="",h=[],p=-1;if(u=r||t.document,(s=arguments[3])&&(s="boolean"==typeof s),"string"==typeof i)h=u.querySelectorAll(i);else if(i&&"object"==typeof i&&n.isElement(i,u))h=[i];else{if(!i||"object"!=typeof i||!i.length)throw new Error(e.messages.errorFactoryInvalidContainer());h=i}if(h.length<1)throw new Error(e.messages.errorFactoryContainerNotFound());for(p=0;(a=h[p])&&(!(p>0)||s);p++)a.id?f=a.id:(f="MixItUp"+n.randomHex(),a.id=f),e.instances[f]instanceof e.Mixer?(l=e.instances[f],(!o||o&&o.debug&&!1!==o.debug.showWarnings)&&console.warn(e.messages.warningFactoryPreexistingInstance())):((l=new e.Mixer).attach(a,u,f,o),e.instances[f]=l),c=new e.Facade(l),o&&o.debug&&o.debug.enable?d.push(l):d.push(c);return s?new e.Collection(d):d[0]}).use=function(t){e.Base.prototype.callActions.call(e,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===e.extensions[t.NAME]&&(t(e),e.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(e.libraries.$=t),e.Base.prototype.callActions.call(e,"afterUse",arguments)},e.instances={},e.extensions={},e.libraries={},n={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){if(this.hasClass(t,e)){var n=new RegExp("(\\s|^)"+e+"(\\s|$)");t.className=t.className.replace(n," ").trim()}},extend:function(t,e,n,i){var o=[],r="",a=-1;n=n||!1,i=i||!1;try{if(Array.isArray(e))for(a=0;a<e.length;a++)o.push(a);else e&&(o=Object.keys(e));for(a=0;a<o.length;a++)r=o[a],!n||"object"!=typeof e[r]||this.isElement(e[r])?t[r]=e[r]:Array.isArray(e[r])?(t[r]||(t[r]=[]),this.extend(t[r],e[r],n,i)):(t[r]||(t[r]={}),this.extend(t[r],e[r],n,i))}catch(e){if(!i)throw e;this.handleExtendError(e,t)}return t},handleExtendError:function(t,n){var i=null,o="",r="",a="",s="",l="",c=-1,u=-1;if(t instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(t.message))){o=i[1];for(l in n){for(u=0;u<o.length&&o.charAt(u)===l.charAt(u);)u++;u>c&&(c=u,s=l)}throw c>1&&(a=e.messages.errorConfigInvalidPropertySuggestion({probableMatch:s})),r=e.messages.errorConfigInvalidProperty({erroneous:o,suggestion:a}),new TypeError(r)}throw t},template:function(t){for(var e=/\${([\w]*)}/g,n={},i=null;i=e.exec(t);)n[i[1]]=new RegExp("\\${"+i[1]+"}","g");return function(e){var i="",o=t;e=e||{};for(i in n)o=o.replace(n[i],void 0!==e[i]?e[i]:"");return o}},on:function(e,n,i,o){e&&(e.addEventListener?e.addEventListener(n,i,o):e.attachEvent&&(e["e"+n+i]=i,e[n+i]=function(){e["e"+n+i](t.event)},e.attachEvent("on"+n,e[n+i])))},off:function(t,e,n){t&&(t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+n]),t[e+n]=null))},getCustomEvent:function(e,n,i){var o=null;return i=i||t.document,"function"==typeof t.CustomEvent?o=new t.CustomEvent(e,{detail:n,bubbles:!0,cancelable:!0}):"function"==typeof i.createEvent?(o=i.createEvent("CustomEvent")).initCustomEvent(e,!0,!0,n):((o=i.createEventObject()).type=e,o.returnValue=!1,o.cancelBubble=!1,o.detail=n),o},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var n=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++n;return n},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(e,n){return n=n||t.document,!!(t.HTMLElement&&e instanceof t.HTMLElement)||(!!(n.defaultView&&n.defaultView.HTMLElement&&e instanceof n.defaultView.HTMLElement)||null!==e&&1===e.nodeType&&"string"==typeof e.nodeName)},createElement:function(e,n){var i=null,o=null;for(i=(n=n||t.document).createDocumentFragment(),(o=n.createElement("div")).innerHTML=e.trim();o.firstChild;)i.appendChild(o.firstChild);return i},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)e=t,t=t.previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var n=t.length;if(n!==e.length)return!1;for(;n--;)if(t[n]!==e[n])return!1;return!0},deepEquals:function(t,e){var n;if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(n in t)if(!e.hasOwnProperty(n)||!this.deepEquals(t[n],e[n]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e=t.slice(),n=e.length,i=n,o=-1,r=[];i--;)o=~~(Math.random()*n),r=e[i],e[i]=e[o],e[o]=r;return e},arrayFromList:function(t){var e,n;try{return Array.prototype.slice.call(t)}catch(i){for(e=[],n=0;n<t.length;n++)e.push(t[n]);return e}},debounce:function(t,e,n){var i;return function(){var o=this,r=arguments,a=n&&!i,s=null;s=function(){i=null,n||t.apply(o,r)},clearTimeout(i),i=setTimeout(s,e),a&&t.apply(o,r)}},position:function(t){for(var e=0,n=0,i=t;t;)e-=t.scrollLeft,n-=t.scrollTop,t===i&&(e+=t.offsetLeft,n+=t.offsetTop,i=t.offsetParent),t=t.parentElement;return{x:e,y:n}},getHypotenuse:function(t,e){var n=t.x-e.x,i=t.y-e.y;return n=n<0?-1*n:n,i=i<0?-1*i:i,Math.sqrt(Math.pow(n,2)+Math.pow(i,2))},getIntersectionRatio:function(t,e){var n=t.width*t.height,i=-1,o=-1,r=-1;return i=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left)),o=Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top)),r=o*i,r/n},closestParent:function(e,n,i,o){var r=e.parentNode;if(o=o||t.document,i&&e.matches(n))return e;for(;r&&r!=o.body;){if(r.matches&&r.matches(n))return r;if(!r.parentNode)return null;r=r.parentNode}return null},children:function(e,n,i){var o=[],r="";return i=i||t.doc,e&&(e.id||(r="Temp"+this.randomHexKey(),e.id=r),o=i.querySelectorAll("#"+e.id+" > "+n),r&&e.removeAttribute("id")),o},clean:function(t){var e=[],n=-1;for(n=0;n<t.length;n++)""!==t[n]&&e.push(t[n]);return e},defer:function(n){var i=null,o=null,r=null;return o=new this.Deferred,e.features.has.promises?o.promise=new Promise(function(t,e){o.resolve=t,o.reject=e}):(r=t.jQuery||n.$)&&"function"==typeof r.Deferred?(i=r.Deferred(),o.promise=i.promise(),o.resolve=i.resolve,o.reject=i.reject):t.console&&console.warn(e.messages.warningNoPromiseImplementation()),o},all:function(n,i){var o=null;return e.features.has.promises?Promise.all(n):(o=t.jQuery||i.$)&&"function"==typeof o.when?o.when.apply(o,n).done(function(){return arguments}):(t.console&&console.warn(e.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,i){var o=-1,r="";if(n.dashCase(e)in t.style)return"";for(o=0;r=i[o];o++)if(r+e in t.style)return r.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(e){return e="object"==typeof e.body?e:t.document,{scrollTop:t.pageYOffset,scrollLeft:t.pageXOffset,docHeight:e.documentElement.scrollHeight,docWidth:e.documentElement.scrollWidth,viewportHeight:e.documentElement.clientHeight,viewportWidth:e.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(e){var n=null;return!!e.offsetParent||"fixed"===(n=t.getComputedStyle(e)).position&&"hidden"!==n.visibility&&"0"!==n.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){var n=t.split("."),i=e.split("."),o=-1,r=-1,a=-1;for(a=0;a<n.length;a++){if(o=parseInt(n[a].replace(/[^\d.]/g,"")),(r=parseInt(i[a].replace(/[^\d.]/g,"")||0))<o)return!1;if(r>o)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=n.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,n){var i="";return(i+=t.block).length&&(i+=t.delineatorElement),i+=t["element"+this.pascalCase(e)],n?(i.length&&(i+=t.delineatorModifier),i+=n):i},getProperty:function(t,e){var n=e.split("."),i=null,o="",r=0;if(!e)return t;for(i=function(t){return t?t[o]:null};r<n.length;)o=n[r],t=i(t),r++;return void 0!==t?t:null}},e.h=n,e.Base=function(){},e.Base.prototype={constructor:e.Base,callActions:function(t,e){var i=this,o=i.constructor.actions[t],r="";if(o&&!n.isEmptyObject(o))for(r in o)o[r].apply(i,e)},callFilters:function(t,e,i){var o=this,r=o.constructor.filters[t],a=e,s="";if(!r||n.isEmptyObject(r))return a;i=i||[];for(s in r)(i=n.arrayFromList(i)).unshift(a),a=r[s].apply(o,i);return a}},e.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){n.extend(this.prototype,t)},this.registerAction=function(t,e,n){(this.actions[t]=this.actions[t]||{})[e]=n},this.registerFilter=function(t,e,n){(this.filters[t]=this.filters[t]||{})[e]=n}},e.Features=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new e.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},e.BaseStatic.call(e.Features),e.Features.prototype=Object.create(e.Base.prototype),n.extend(e.Features.prototype,{constructor:e.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var e=this;e.callActions("beforeRunTests",arguments),e.has.promises="function"==typeof t.Promise,e.has.transitions="unsupported"!==e.transitionPrefix,e.callActions("afterRunTests",arguments),n.freeze(e.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=n.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=n.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=n.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+n.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+n.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+n.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+n.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+n.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),e.Has=function(){this.transitions=!1,this.promises=!1,n.seal(this)},e.features=new e.Features,e.features.init(),e.ConfigAnimation=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigAnimation),e.ConfigAnimation.prototype=Object.create(e.Base.prototype),e.ConfigAnimation.prototype.constructor=e.ConfigAnimation,e.ConfigBehavior=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigBehavior),e.ConfigBehavior.prototype=Object.create(e.Base.prototype),e.ConfigBehavior.prototype.constructor=e.ConfigBehavior,e.ConfigCallbacks=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigCallbacks),e.ConfigCallbacks.prototype=Object.create(e.Base.prototype),e.ConfigCallbacks.prototype.constructor=e.ConfigCallbacks,e.ConfigControls=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigControls),e.ConfigControls.prototype=Object.create(e.Base.prototype),e.ConfigControls.prototype.constructor=e.ConfigControls,e.ConfigClassNames=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigClassNames),e.ConfigClassNames.prototype=Object.create(e.Base.prototype),e.ConfigClassNames.prototype.constructor=e.ConfigClassNames,e.ConfigData=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigData),e.ConfigData.prototype=Object.create(e.Base.prototype),e.ConfigData.prototype.constructor=e.ConfigData,e.ConfigDebug=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigDebug),e.ConfigDebug.prototype=Object.create(e.Base.prototype),e.ConfigDebug.prototype.constructor=e.ConfigDebug,e.ConfigLayout=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigLayout),e.ConfigLayout.prototype=Object.create(e.Base.prototype),e.ConfigLayout.prototype.constructor=e.ConfigLayout,e.ConfigLoad=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigLoad),e.ConfigLoad.prototype=Object.create(e.Base.prototype),e.ConfigLoad.prototype.constructor=e.ConfigLoad,e.ConfigSelectors=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigSelectors),e.ConfigSelectors.prototype=Object.create(e.Base.prototype),e.ConfigSelectors.prototype.constructor=e.ConfigSelectors,e.ConfigRender=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigRender),e.ConfigRender.prototype=Object.create(e.Base.prototype),e.ConfigRender.prototype.constructor=e.ConfigRender,e.ConfigTemplates=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.ConfigTemplates),e.ConfigTemplates.prototype=Object.create(e.Base.prototype),e.ConfigTemplates.prototype.constructor=e.ConfigTemplates,e.Config=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.animation=new e.ConfigAnimation,this.behavior=new e.ConfigBehavior,this.callbacks=new e.ConfigCallbacks,this.controls=new e.ConfigControls,this.classNames=new e.ConfigClassNames,this.data=new e.ConfigData,this.debug=new e.ConfigDebug,this.layout=new e.ConfigLayout,this.load=new e.ConfigLoad,this.selectors=new e.ConfigSelectors,this.render=new e.ConfigRender,this.templates=new e.ConfigTemplates,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.Config),e.Config.prototype=Object.create(e.Base.prototype),e.Config.prototype.constructor=e.Config,e.MixerDom=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.MixerDom),e.MixerDom.prototype=Object.create(e.Base.prototype),e.MixerDom.prototype.constructor=e.MixerDom,e.UiClassNames=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.UiClassNames),e.UiClassNames.prototype=Object.create(e.Base.prototype),e.UiClassNames.prototype.constructor=e.UiClassNames,e.CommandDataset=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.CommandDataset),e.CommandDataset.prototype=Object.create(e.Base.prototype),e.CommandDataset.prototype.constructor=e.CommandDataset,e.CommandMultimix=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.CommandMultimix),e.CommandMultimix.prototype=Object.create(e.Base.prototype),e.CommandMultimix.prototype.constructor=e.CommandMultimix,e.CommandFilter=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.CommandFilter),e.CommandFilter.prototype=Object.create(e.Base.prototype),e.CommandFilter.prototype.constructor=e.CommandFilter,e.CommandSort=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.CommandSort),e.CommandSort.prototype=Object.create(e.Base.prototype),e.CommandSort.prototype.constructor=e.CommandSort,e.CommandInsert=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.CommandInsert),e.CommandInsert.prototype=Object.create(e.Base.prototype),e.CommandInsert.prototype.constructor=e.CommandInsert,e.CommandRemove=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.CommandRemove),e.CommandRemove.prototype=Object.create(e.Base.prototype),e.CommandRemove.prototype.constructor=e.CommandRemove,e.CommandChangeLayout=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.CommandChangeLayout),e.CommandChangeLayout.prototype=Object.create(e.Base.prototype),e.CommandChangeLayout.prototype.constructor=e.CommandChangeLayout,e.ControlDefinition=function(t,i,o,r){e.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=i,this.live=o||!1,this.parent=r||"",this.callActions("afterConstruct"),n.freeze(this),n.seal(this)},e.BaseStatic.call(e.ControlDefinition),e.ControlDefinition.prototype=Object.create(e.Base.prototype),e.ControlDefinition.prototype.constructor=e.ControlDefinition,e.controlDefinitions=[],e.controlDefinitions.push(new e.ControlDefinition("multimix","[data-filter][data-sort]")),e.controlDefinitions.push(new e.ControlDefinition("filter","[data-filter]")),e.controlDefinitions.push(new e.ControlDefinition("sort","[data-sort]")),e.controlDefinitions.push(new e.ControlDefinition("toggle","[data-toggle]")),e.Control=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new e.UiClassNames,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.Control),e.Control.prototype=Object.create(e.Base.prototype),n.extend(e.Control.prototype,{constructor:e.Control,init:function(t,n,i){var o=this;if(this.callActions("beforeInit",arguments),o.el=t,o.type=n,o.selector=i,o.selector)o.status="live";else switch(o.canDisable="boolean"==typeof o.el.disable,o.type){case"filter":o.filter=o.el.getAttribute("data-filter");break;case"toggle":o.filter=o.el.getAttribute("data-toggle");break;case"sort":o.sort=o.el.getAttribute("data-sort");break;case"multimix":o.filter=o.el.getAttribute("data-filter"),o.sort=o.el.getAttribute("data-sort")}o.bindClick(),e.controls.push(o),this.callActions("afterInit",arguments)},isBound:function(t){var e=this,n=!1;return this.callActions("beforeIsBound",arguments),n=e.bound.indexOf(t)>-1,e.callFilters("afterIsBound",n,arguments)},addBinding:function(t){var e=this;this.callActions("beforeAddBinding",arguments),e.isBound()||e.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var n=this,i=-1;this.callActions("beforeRemoveBinding",arguments),(i=n.bound.indexOf(t))>-1&&n.bound.splice(i,1),n.bound.length<1&&(n.unbindClick(),i=e.controls.indexOf(n),e.controls.splice(i,1),"active"===n.status&&n.renderStatus(n.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var t=this;this.callActions("beforeBindClick",arguments),t.handler=function(e){t.handleClick(e)},n.on(t.el,"click",t.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){var t=this;this.callActions("beforeUnbindClick",arguments),n.off(t.el,"click",t.handler),t.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var i=this,o=null,r=null,a=!1,s={},l=null,c=[],u=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,r=i.bound[0],o=i.selector?n.closestParent(t.target,r.config.selectors.control+i.selector,!0,r.dom.document):i.el){switch(i.type){case"filter":s.filter=i.filter||o.getAttribute("data-filter");break;case"sort":s.sort=i.sort||o.getAttribute("data-sort");break;case"multimix":s.filter=i.filter||o.getAttribute("data-filter"),s.sort=i.sort||o.getAttribute("data-sort");break;case"toggle":s.filter=i.filter||o.getAttribute("data-toggle"),a="live"===i.status?n.hasClass(o,i.classNames.active):"active"===i.status}for(u=0;u<i.bound.length;u++)l=new e.CommandMultimix,n.extend(l,s),c.push(l);for(c=i.callFilters("commandsHandleClick",c,arguments),i.pending=i.bound.length,u=0;r=i.bound[u];u++)(s=c[u])&&(r.lastClicked||(r.lastClicked=o),e.events.fire("mixClick",r.dom.container,{state:r.state,instance:r,originalEvent:t,control:r.lastClicked},r.dom.document),"function"==typeof r.config.callbacks.onMixClick&&!1===r.config.callbacks.onMixClick.call(r.lastClicked,r.state,t,r)||("toggle"===i.type?a?r.toggleOff(s.filter):r.toggleOn(s.filter):r.multimix(s)));this.callActions("afterHandleClick",arguments)}else i.callActions("afterHandleClick",arguments)},update:function(t,n){var i=this,o=new e.CommandMultimix;i.callActions("beforeUpdate",arguments),i.pending--,i.pending=Math.max(0,i.pending),i.pending>0||("live"===i.status?i.updateLive(t,n):(o.sort=i.sort,o.filter=i.filter,i.callFilters("actionsUpdate",o,arguments),i.parseStatusChange(i.el,t,o,n)),i.callActions("afterUpdate",arguments))},updateLive:function(t,n){var i=this,o=null,r=null,a=null,s=-1;if(i.callActions("beforeUpdateLive",arguments),i.el){for(o=i.el.querySelectorAll(i.selector),s=0;a=o[s];s++){switch(r=new e.CommandMultimix,i.type){case"filter":r.filter=a.getAttribute("data-filter");break;case"sort":r.sort=a.getAttribute("data-sort");break;case"multimix":r.filter=a.getAttribute("data-filter"),r.sort=a.getAttribute("data-sort");break;case"toggle":r.filter=a.getAttribute("data-toggle")}r=i.callFilters("actionsUpdateLive",r,arguments),i.parseStatusChange(a,t,r,n)}i.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,n,i){var o=this,r="",a=-1;switch(o.callActions("beforeParseStatusChange",arguments),o.type){case"filter":e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"multimix":e.sort===n.sort&&e.filter===n.filter?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(r=e.sort.replace(/:asc/g,"")),e.sort===n.sort||r===n.sort?o.renderStatus(t,"active"):o.renderStatus(t,"inactive");break;case"toggle":for(i.length<1&&o.renderStatus(t,"inactive"),e.filter===n.filter&&o.renderStatus(t,"active"),a=0;a<i.length;a++){if(i[a]===n.filter){o.renderStatus(t,"active");break}o.renderStatus(t,"inactive")}}o.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var i=this;switch(i.callActions("beforeRenderStatus",arguments),e){case"active":n.addClass(t,i.classNames.active),n.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"inactive":n.removeClass(t,i.classNames.active),n.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"disabled":i.canDisable&&(i.el.disabled=!0),n.addClass(t,i.classNames.disabled),n.removeClass(t,i.classNames.active)}"live"!==i.status&&(i.status=e),i.callActions("afterRenderStatus",arguments)}}),e.controls=[],e.StyleData=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new e.TransformData,this.translateX=new e.TransformData,this.translateY=new e.TransformData,this.translateZ=new e.TransformData,this.rotateX=new e.TransformData,this.rotateY=new e.TransformData,this.rotateZ=new e.TransformData,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.StyleData),e.StyleData.prototype=Object.create(e.Base.prototype),e.StyleData.prototype.constructor=e.StyleData,e.TransformData=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.TransformData),e.TransformData.prototype=Object.create(e.Base.prototype),e.TransformData.prototype.constructor=e.TransformData,e.TransformDefaults=function(){e.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.TransformDefaults),e.TransformDefaults.prototype=Object.create(e.StyleData.prototype),e.TransformDefaults.prototype.constructor=e.TransformDefaults,e.transformDefaults=new e.TransformDefaults,e.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},e.Events=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.Events),e.Events.prototype=Object.create(e.Base.prototype),e.Events.prototype.constructor=e.Events,e.Events.prototype.fire=function(t,i,o,r){var a=this,s=null,l=new e.EventDetail;if(a.callActions("beforeFire",arguments),void 0===a[t])throw new Error('Event type "'+t+'" not found.');l.state=new e.State,n.extend(l.state,o.state),o.futureState&&(l.futureState=new e.State,n.extend(l.futureState,o.futureState)),l.instance=o.instance,o.originalEvent&&(l.originalEvent=o.originalEvent),s=n.getCustomEvent(t,l,r),a.callFilters("eventFire",s,arguments),i.dispatchEvent(s)},e.events=new e.Events,e.QueueItem=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.QueueItem),e.QueueItem.prototype=Object.create(e.Base.prototype),e.QueueItem.prototype.constructor=e.QueueItem,e.Mixer=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.config=new e.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new e.MixerDom,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.Mixer),e.Mixer.prototype=Object.create(e.Base.prototype),n.extend(e.Mixer.prototype,{constructor:e.Mixer,attach:function(i,o,r,a){var s=this,l=null,c=-1;for(s.callActions("beforeAttach",arguments),s.id=r,a&&n.extend(s.config,a,!0,!0),s.sanitizeConfig(),s.cacheDom(i,o),s.config.layout.containerClassName&&n.addClass(s.dom.container,s.config.layout.containerClassName),e.features.has.transitions||(s.config.animation.enable=!1),void 0===t.console&&(s.config.debug.showWarnings=!1),s.config.data.uidKey&&(s.config.controls.enable=!1),s.indexTargets(),s.state=s.getInitialState(),c=0;l=s.lastOperation.toHide[c];c++)l.hide();s.config.controls.enable&&(s.initControls(),s.buildToggleArray(null,s.state),s.updateControls({filter:s.state.activeFilter,sort:s.state.activeSort})),s.parseEffects(),s.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,n=new e.State,i=new e.Operation;if(t.callActions("beforeGetInitialState",arguments),n.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(e.messages.errorConfigDataUidKeyNotSet());i.startDataset=i.newDataset=n.activeDataset=t.config.load.dataset.slice(),i.startContainerClassName=i.newContainerClassName=n.activeContainerClassName,i.show=t.targets.slice(),n=t.callFilters("stateGetInitialState",n,arguments)}else n.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,n.activeSort=t.parseSortArgs([t.config.load.sort]).command,n.totalTargets=t.targets.length,(n=t.callFilters("stateGetInitialState",n,arguments)).activeSort.collection||n.activeSort.attribute||"random"===n.activeSort.order||"desc"===n.activeSort.order?(i.newSort=n.activeSort,t.sortOperation(i),t.printSort(!1,i),t.targets=i.newOrder):i.startOrder=i.newOrder=t.targets,i.startFilter=i.newFilter=n.activeFilter,i.startSort=i.newSort=n.activeSort,i.startContainerClassName=i.newContainerClassName=n.activeContainerClassName,"all"===i.newFilter.selector?i.newFilter.selector=t.config.selectors.target:"none"===i.newFilter.selector&&(i.newFilter.selector="");return i=t.callFilters("operationGetInitialState",i,[n]),t.lastOperation=i,i.newFilter&&t.filterOperation(i),n=t.buildState(i)},cacheDom:function(t,e){var n=this;n.callActions("beforeCacheDom",arguments),n.dom.document=e,n.dom.body=n.dom.document.querySelector("body"),n.dom.container=t,n.dom.parent=t,n.callActions("afterCacheDom",arguments)},indexTargets:function(){var t=this,i=null,o=null,r=null,a=-1;if(t.callActions("beforeIndexTargets",arguments),t.dom.targets=t.config.layout.allowNestedTargets?t.dom.container.querySelectorAll(t.config.selectors.target):n.children(t.dom.container,t.config.selectors.target,t.dom.document),t.dom.targets=n.arrayFromList(t.dom.targets),t.targets=[],(r=t.config.load.dataset)&&r.length!==t.dom.targets.length)throw new Error(e.messages.errorDatasetPrerenderedMismatch());if(t.dom.targets.length){for(a=0;o=t.dom.targets[a];a++)(i=new e.Target).init(o,t,r?r[a]:void 0),i.isInDom=!0,t.targets.push(i);t.dom.parent=t.dom.targets[0].parentElement===t.dom.container?t.dom.container:t.dom.targets[0].parentElement}t.origOrder=t.targets,t.callActions("afterIndexTargets",arguments)},initControls:function(){var t=this,n="",i=null,o=null,r=null,a=null,s=null,l=-1,c=-1;switch(t.callActions("beforeInitControls",arguments),t.config.controls.scope){case"local":r=t.dom.container;break;case"global":r=t.dom.document;break;default:throw new Error(e.messages.errorConfigInvalidControlsScope())}for(l=0;n=e.controlDefinitions[l];l++)if(t.config.controls.live||n.live){if(n.parent){if(!(a=t.dom[n.parent])||a.length<0)continue;"number"!=typeof a.length&&(a=[a])}else a=[r];for(c=0;o=a[c];c++)s=t.getControl(o,n.type,n.selector),t.controls.push(s)}else for(i=r.querySelectorAll(t.config.selectors.control+n.selector),c=0;o=i[c];c++)(s=t.getControl(o,n.type,""))&&t.controls.push(s);t.callActions("afterInitControls",arguments)},getControl:function(t,i,o){var r=this,a=null,s=-1;if(r.callActions("beforeGetControl",arguments),!o)for(s=0;a=e.controls[s];s++){if(a.el===t&&a.isBound(r))return r.callFilters("controlGetControl",null,arguments);if(a.el===t&&a.type===i&&a.selector===o)return a.addBinding(r),r.callFilters("controlGetControl",a,arguments)}return(a=new e.Control).init(t,i,o),a.classNames.base=n.getClassname(r.config.classNames,i),a.classNames.active=n.getClassname(r.config.classNames,i,r.config.classNames.modifierActive),a.classNames.disabled=n.getClassname(r.config.classNames,i,r.config.classNames.modifierDisabled),a.addBinding(r),r.callFilters("controlGetControl",a,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",i="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=n.clean(t.toggleArray),""===(i=t.toggleArray.join(e))&&(i=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",i,arguments)},buildToggleArray:function(t,e){var i=this,o="";if(i.callActions("beforeBuildToggleArray",arguments),t&&t.filter)o=t.filter.selector.replace(/\s/g,"");else{if(!e)return;o=e.activeFilter.selector.replace(/\s/g,"")}o!==i.config.selectors.target&&"all"!==o||(o=""),"or"===i.config.controls.toggleLogic?i.toggleArray=o.split(","):i.toggleArray=i.splitCompoundSelector(o),i.toggleArray=n.clean(i.toggleArray),i.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),n=[],i="",o=-1;for(""===e[0]&&e.shift(),o=0;o<e.length;o++)o%2==0&&(i=""),i+=e[o],o%2!=0&&n.push(i);return n},updateControls:function(t){var i=this,o=null,r=new e.CommandMultimix,a=-1;for(i.callActions("beforeUpdateControls",arguments),t.filter?r.filter=t.filter.selector:r.filter=i.state.activeFilter.selector,t.sort?r.sort=i.buildSortString(t.sort):r.sort=i.buildSortString(i.state.activeSort),r.filter===i.config.selectors.target&&(r.filter="all"),""===r.filter&&(r.filter="none"),n.freeze(r),a=0;o=i.controls[a];a++)o.update(r,i.toggleArray);i.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e=this,n="";return n+=t.sortString,t.next&&(n+=" "+e.buildSortString(t.next)),n},insertTargets:function(t,i){var o=this,r=null,a=-1,s=null,l=null,c=null,u=-1;if(o.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),r=o.getNextSibling(t.index,t.sibling,t.position),s=o.dom.document.createDocumentFragment(),a=r?n.index(r,o.config.selectors.target):o.targets.length,t.collection){for(u=0;c=t.collection[u];u++){if(o.dom.targets.indexOf(c)>-1)throw new Error(e.messages.errorInsertPreexistingElement());c.style.display="none",s.appendChild(c),s.appendChild(o.dom.document.createTextNode(" ")),n.isElement(c,o.dom.document)&&c.matches(o.config.selectors.target)&&((l=new e.Target).init(c,o),l.isInDom=!0,o.targets.splice(a,0,l),a++)}o.dom.parent.insertBefore(s,r)}i.startOrder=o.origOrder=o.targets,o.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,n){var i=this,o=null;return t=Math.max(t,0),e&&"before"===n?o=e:e&&"after"===n?o=e.nextElementSibling||null:i.targets.length>0&&void 0!==t?o=t<i.targets.length||!i.targets.length?i.targets[t].dom.el:i.targets[i.targets.length-1].dom.el.nextElementSibling:0===i.targets.length&&i.dom.parent.children.length>0&&(i.config.layout.siblingAfter?o=i.config.layout.siblingAfter:i.config.layout.siblingBefore?o=i.config.layout.siblingBefore.nextElementSibling:i.dom.parent.children[0]),i.callFilters("elementGetNextSibling",o,arguments)},filterOperation:function(t){var e=this,n=!1,i=-1,o="",r=null,a=-1;for(e.callActions("beforeFilterOperation",arguments),o=t.newFilter.action,a=0;r=t.newOrder[a];a++)n=t.newFilter.collection?t.newFilter.collection.indexOf(r.dom.el)>-1:""!==t.newFilter.selector&&r.dom.el.matches(t.newFilter.selector),e.evaluateHideShow(n,r,o,t);if(t.toRemove.length)for(a=0;r=t.show[a];a++)t.toRemove.indexOf(r)>-1&&(t.show.splice(a,1),(i=t.toShow.indexOf(r))>-1&&t.toShow.splice(i,1),t.toHide.push(r),t.hide.push(r),a--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==e.targets.length&&(t.hasFailed=!0),e.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,n,i){var o=this;o.callActions("beforeEvaluateHideShow",arguments),!0===t&&"show"===n||!1===t&&"hide"===n?(i.show.push(e),!e.isShown&&i.toShow.push(e)):(i.hide.push(e),e.isShown&&i.toHide.push(e)),o.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(t){var e=this;e.callActions("beforeSortOperation",arguments),t.startOrder=e.targets,t.newSort.collection?t.newOrder=t.newSort.collection:"random"===t.newSort.order?t.newOrder=n.arrayShuffle(t.startOrder):""===t.newSort.attribute?(t.newOrder=e.origOrder.slice(),"desc"===t.newSort.order&&t.newOrder.reverse()):(t.newOrder=t.startOrder.slice(),t.newOrder.sort(function(n,i){return e.compare(n,i,t.newSort)})),n.isEqualArray(t.newOrder,t.startOrder)&&(t.willSort=!1),e.callActions("afterSortOperation",arguments)},compare:function(t,e,n){var i=this,o=n.order,r=i.getAttributeValue(t,n.attribute),a=i.getAttributeValue(e,n.attribute);return isNaN(1*r)||isNaN(1*a)?(r=r.toLowerCase(),a=a.toLowerCase()):(r*=1,a*=1),r<a?"asc"===o?-1:1:r>a?"asc"===o?1:-1:r===a&&n.next?i.compare(t,e,n.next):0},getAttributeValue:function(t,n){var i=this,o="";return null===(o=t.dom.el.getAttribute("data-"+n))&&i.config.debug.showWarnings&&console.warn(e.messages.warningInconsistentSortingAttributes({attribute:"data-"+n})),i.callFilters("valueGetAttributeValue",o||0,arguments)},printSort:function(e,i){var o=this,r=e?i.newOrder:i.startOrder,a=e?i.startOrder:i.newOrder,s=r.length?r[r.length-1].dom.el.nextElementSibling:null,l=t.document.createDocumentFragment(),c=null,u=null,d=null,f=-1;for(o.callActions("beforePrintSort",arguments),f=0;u=r[f];f++)"absolute"!==(d=u.dom.el).style.position&&(n.removeWhitespace(d.previousSibling),d.parentElement.removeChild(d));for((c=s?s.previousSibling:o.dom.parent.lastChild)&&"#text"===c.nodeName&&n.removeWhitespace(c),f=0;u=a[f];f++)d=u.dom.el,n.isElement(l.lastChild)&&l.appendChild(t.document.createTextNode(" ")),l.appendChild(d);o.dom.parent.firstChild&&o.dom.parent.firstChild!==s&&l.insertBefore(t.document.createTextNode(" "),l.childNodes[0]),s?(l.appendChild(t.document.createTextNode(" ")),o.dom.parent.insertBefore(l,s)):o.dom.parent.appendChild(l),o.callActions("afterPrintSort",arguments)},parseSortString:function(t,i){var o=this,r=t.split(" "),a=i,s=[],l=-1;for(l=0;l<r.length;l++){switch(s=r[l].split(":"),a.sortString=r[l],a.attribute=n.dashCase(s[0]),a.order=s[1]||"asc",a.attribute){case"default":a.attribute="";break;case"random":a.attribute="",a.order="random"}if(!a.attribute||"random"===a.order)break;l<r.length-1&&(a.next=new e.CommandSort,n.freeze(a),a=a.next)}return o.callFilters("commandsParseSort",i,arguments)},parseEffects:function(){var t=this,n="",i=t.config.animation.effectsIn||t.config.animation.effects,o=t.config.animation.effectsOut||t.config.animation.effects;t.callActions("beforeParseEffects",arguments),t.effectsIn=new e.StyleData,t.effectsOut=new e.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",i,t.effectsIn,t.transformIn),t.parseEffect("fade",o,t.effectsOut,t.transformOut,!0);for(n in e.transformDefaults)e.transformDefaults[n]instanceof e.TransformData&&(t.parseEffect(n,i,t.effectsIn,t.transformIn),t.parseEffect(n,o,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",i,t.effectsIn,t.transformIn),t.parseEffect("stagger",o,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,n,i,o,r){var a=this,s=-1,l="",c="",u=["%","px","em","rem","vh","vw","deg"],d="",f=-1;if(a.callActions("beforeParseEffect",arguments),"string"!=typeof n)throw new TypeError(e.messages.errorConfigInvalidAnimationEffects());if(n.indexOf(t)<0)"stagger"===t&&(a.staggerDuration=0);else{switch((s=n.indexOf(t+"("))>-1&&(l=n.substring(s),c=/\(([^)]+)\)/.exec(l)[1]),t){case"fade":i.opacity=c?parseFloat(c):0;break;case"stagger":a.staggerDuration=c?parseFloat(c):100;break;default:if(r&&a.config.animation.reverseOut&&"scale"!==t?i[t].value=-1*(c?parseFloat(c):e.transformDefaults[t].value):i[t].value=c?parseFloat(c):e.transformDefaults[t].value,c){for(f=0;d=u[f];f++)if(c.indexOf(d)>-1){i[t].unit=d;break}}else i[t].unit=e.transformDefaults[t].unit;o.push(t+"("+i[t].value+i[t].unit+")")}a.callActions("afterParseEffect",arguments)}},buildState:function(t){var n=this,i=new e.State,o=null,r=-1;for(n.callActions("beforeBuildState",arguments),r=0;o=n.targets[r];r++)(!t.toRemove.length||t.toRemove.indexOf(o)<0)&&i.targets.push(o.dom.el);for(r=0;o=t.matching[r];r++)i.matching.push(o.dom.el);for(r=0;o=t.show[r];r++)i.show.push(o.dom.el);for(r=0;o=t.hide[r];r++)(!t.toRemove.length||t.toRemove.indexOf(o)<0)&&i.hide.push(o.dom.el);return i.id=n.id,i.container=n.dom.container,i.activeFilter=t.newFilter,i.activeSort=t.newSort,i.activeDataset=t.newDataset,i.activeContainerClassName=t.newContainerClassName,i.hasFailed=t.hasFailed,i.totalTargets=n.targets.length,i.totalShow=t.show.length,i.totalHide=t.hide.length,i.totalMatching=t.matching.length,i.triggerElement=t.triggerElement,n.callFilters("stateBuildState",i,arguments)},goMix:function(i,o){var r=this,a=null;return r.callActions("beforeGoMix",arguments),r.config.animation.duration&&r.config.animation.effects&&n.isVisible(r.dom.container)||(i=!1),o.toShow.length||o.toHide.length||o.willSort||o.willChangeLayout||(i=!1),o.startState.show.length||o.show.length||(i=!1),e.events.fire("mixStart",r.dom.container,{state:o.startState,futureState:o.newState,instance:r},r.dom.document),"function"==typeof r.config.callbacks.onMixStart&&r.config.callbacks.onMixStart.call(r.dom.container,o.startState,o.newState,r),n.removeClass(r.dom.container,n.getClassname(r.config.classNames,"container",r.config.classNames.modifierFailed)),a=r.userDeferred?r.userDeferred:r.userDeferred=n.defer(e.libraries),r.isBusy=!0,i&&e.features.has.transitions?(t.pageYOffset!==o.docState.scrollTop&&t.scrollTo(o.docState.scrollLeft,o.docState.scrollTop),r.config.animation.applyPerspective&&(r.dom.parent.style[e.features.perspectiveProp]=r.config.animation.perspectiveDistance,r.dom.parent.style[e.features.perspectiveOriginProp]=r.config.animation.perspectiveOrigin),r.config.animation.animateResizeContainer&&o.startHeight!==o.newHeight&&o.viewportDeltaY!==o.startHeight-o.newHeight&&(r.dom.parent.style.height=o.startHeight+"px"),r.config.animation.animateResizeContainer&&o.startWidth!==o.newWidth&&o.viewportDeltaX!==o.startWidth-o.newWidth&&(r.dom.parent.style.width=o.startWidth+"px"),o.startHeight===o.newHeight&&(r.dom.parent.style.height=o.startHeight+"px"),o.startWidth===o.newWidth&&(r.dom.parent.style.width=o.startWidth+"px"),o.startHeight===o.newHeight&&o.startWidth===o.newWidth&&(r.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){r.moveTargets(o)}),r.callFilters("promiseGoMix",a.promise,arguments)):(r.config.debug.fauxAsync?setTimeout(function(){r.cleanUp(o)},r.config.animation.duration):r.cleanUp(o),r.callFilters("promiseGoMix",a.promise,arguments))},getStartMixData:function(n){var i=this,o=t.getComputedStyle(i.dom.parent),r=i.dom.parent.getBoundingClientRect(),a=null,s={},l=-1,c=o[e.features.boxSizingProp];for(i.incPadding="border-box"===c,i.callActions("beforeGetStartMixData",arguments),l=0;a=n.show[l];l++)s=a.getPosData(),n.showPosData[l]={startPosData:s};for(l=0;a=n.toHide[l];l++)s=a.getPosData(),n.toHidePosData[l]={startPosData:s};n.startX=r.left,n.startY=r.top,n.startHeight=i.incPadding?r.height:r.height-parseFloat(o.paddingTop)-parseFloat(o.paddingBottom)-parseFloat(o.borderTop)-parseFloat(o.borderBottom),n.startWidth=i.incPadding?r.width:r.width-parseFloat(o.paddingLeft)-parseFloat(o.paddingRight)-parseFloat(o.borderLeft)-parseFloat(o.borderRight),i.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,i=null,o=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),o=0;i=t.toShow[o];o++)i.show();t.willChangeLayout&&(n.removeClass(e.dom.container,t.startContainerClassName),n.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=this,n=null,i=-1;for(e.callActions("beforeGetInterMixData",arguments),i=0;n=t.show[i];i++)t.showPosData[i].interPosData=n.getPosData();for(i=0;n=t.toHide[i];i++)t.toHidePosData[i].interPosData=n.getPosData();e.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=this,n=null,i=-1;for(e.callActions("beforeSetFinal",arguments),t.willSort&&e.printSort(!1,t),i=0;n=t.toHide[i];i++)n.hide();e.callActions("afterSetFinal",arguments)},getFinalMixData:function(e){var i=this,o=null,r=null,a=null,s=-1;for(i.callActions("beforeGetFinalMixData",arguments),s=0;a=e.show[s];s++)e.showPosData[s].finalPosData=a.getPosData();for(s=0;a=e.toHide[s];s++)e.toHidePosData[s].finalPosData=a.getPosData();for((i.config.animation.clampHeight||i.config.animation.clampWidth)&&(i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=""),i.incPadding||(o=t.getComputedStyle(i.dom.parent)),r=i.dom.parent.getBoundingClientRect(),e.newX=r.left,e.newY=r.top,e.newHeight=i.incPadding?r.height:r.height-parseFloat(o.paddingTop)-parseFloat(o.paddingBottom)-parseFloat(o.borderTop)-parseFloat(o.borderBottom),e.newWidth=i.incPadding?r.width:r.width-parseFloat(o.paddingLeft)-parseFloat(o.paddingRight)-parseFloat(o.borderLeft)-parseFloat(o.borderRight),e.viewportDeltaX=e.docState.viewportWidth-this.dom.document.documentElement.clientWidth,e.viewportDeltaY=e.docState.viewportHeight-this.dom.document.documentElement.clientHeight,e.willSort&&i.printSort(!0,e),s=0;a=e.toShow[s];s++)a.hide();for(s=0;a=e.toHide[s];s++)a.show();e.willChangeLayout&&(n.removeClass(i.dom.container,e.newContainerClassName),n.addClass(i.dom.container,i.config.layout.containerClassName)),i.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var n=this,i=null,o=null,r=Object.getOwnPropertyNames(n.effectsIn),a="",s=null,l=-1,c=-1,u=-1,d=-1;for(n.callActions("beforeGetTweenData",arguments),u=0;i=t.show[u];u++)for((o=t.showPosData[u]).posIn=new e.StyleData,o.posOut=new e.StyleData,o.tweenData=new e.StyleData,i.isShown?(o.posIn.x=o.startPosData.x-o.interPosData.x,o.posIn.y=o.startPosData.y-o.interPosData.y):o.posIn.x=o.posIn.y=0,o.posOut.x=o.finalPosData.x-o.interPosData.x,o.posOut.y=o.finalPosData.y-o.interPosData.y,o.posIn.opacity=i.isShown?1:n.effectsIn.opacity,o.posOut.opacity=1,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,i.isShown||n.config.animation.nudge||(o.posIn.x=o.posOut.x,o.posIn.y=o.posOut.y),o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,n.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,l=(o.startPosData.width||o.finalPosData.width)-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-l,c=(o.startPosData.height||o.finalPosData.height)-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-c,o.posOut.width=o.finalPosData.width,o.posOut.height=o.finalPosData.height,l=(o.finalPosData.width||o.startPosData.width)-o.interPosData.width,o.posOut.marginRight=o.finalPosData.marginRight-l,c=(o.finalPosData.height||o.startPosData.height)-o.interPosData.height,o.posOut.marginBottom=o.finalPosData.marginBottom-c,o.tweenData.width=o.posOut.width-o.posIn.width,o.tweenData.height=o.posOut.height-o.posIn.height,o.tweenData.marginRight=o.posOut.marginRight-o.posIn.marginRight,o.tweenData.marginBottom=o.posOut.marginBottom-o.posIn.marginBottom),d=0;a=r[d];d++)(s=n.effectsIn[a])instanceof e.TransformData&&s.value&&(o.posIn[a].value=s.value,o.posOut[a].value=0,o.tweenData[a].value=o.posOut[a].value-o.posIn[a].value,o.posIn[a].unit=o.posOut[a].unit=o.tweenData[a].unit=s.unit);for(u=0;i=t.toHide[u];u++)for((o=t.toHidePosData[u]).posIn=new e.StyleData,o.posOut=new e.StyleData,o.tweenData=new e.StyleData,o.posIn.x=i.isShown?o.startPosData.x-o.interPosData.x:0,o.posIn.y=i.isShown?o.startPosData.y-o.interPosData.y:0,o.posOut.x=n.config.animation.nudge?0:o.posIn.x,o.posOut.y=n.config.animation.nudge?0:o.posIn.y,o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,n.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,l=o.startPosData.width-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-l,c=o.startPosData.height-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-c),o.posIn.opacity=1,o.posOut.opacity=n.effectsOut.opacity,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,d=0;a=r[d];d++)(s=n.effectsOut[a])instanceof e.TransformData&&s.value&&(o.posIn[a].value=0,o.posOut[a].value=s.value,o.tweenData[a].value=o.posOut[a].value-o.posIn[a].value,o.posIn[a].unit=o.posOut[a].unit=o.tweenData[a].unit=s.unit);n.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var i=this,o=null,r=null,a=null,s="",l=!1,c=-1,u=-1,d=i.checkProgress.bind(i);for(i.callActions("beforeMoveTargets",arguments),u=0;o=t.show[u];u++)r=new e.IMoveData,a=t.showPosData[u],s=o.isShown?"none":"show",(l=i.willTransition(s,t.hasEffect,a.posIn,a.posOut))&&c++,o.show(),r.posIn=a.posIn,r.posOut=a.posOut,r.statusChange=s,r.staggerIndex=c,r.operation=t,r.callback=l?d:null,o.move(r);for(u=0;o=t.toHide[u];u++)a=t.toHidePosData[u],r=new e.IMoveData,s="hide",l=i.willTransition(s,a.posIn,a.posOut),r.posIn=a.posIn,r.posOut=a.posOut,r.statusChange=s,r.staggerIndex=u,r.operation=t,r.callback=l?d:null,o.move(r);i.config.animation.animateResizeContainer&&(i.dom.parent.style[e.features.transitionProp]="height "+i.config.animation.duration+"ms ease, width "+i.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(i.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(i.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(n.removeClass(i.dom.container,i.config.layout.ContainerClassName),n.addClass(i.dom.container,t.newContainerClassName)),i.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t=this,e=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],n="",i=null,o=!1,r=-1;if(1!==t.effectsIn.opacity)return t.callFilters("resultHasEffect",!0,arguments);for(r=0;n=e[r];r++)if(i=t.effectsIn[n],0!==("undefined"!==i.value?i.value:i)){o=!0;break}return t.callFilters("resultHasEffect",o,arguments)},willTransition:function(t,e,i,o){var r=this,a=!1;return a=!!n.isVisible(r.dom.container)&&(!!("none"!==t&&e||i.x!==o.x||i.y!==o.y)||!!r.config.animation.animateResizeTargets&&(i.width!==o.width||i.height!==o.height||i.marginRight!==o.marginRight||i.marginTop!==o.marginTop)),r.callFilters("resultWillTransition",a,arguments)},checkProgress:function(t){var e=this;e.targetsDone++,e.targetsBound===e.targetsDone&&e.cleanUp(t)},cleanUp:function(t){var i=this,o=null,r=null,a=null,s=null,l=-1;for(i.callActions("beforeCleanUp",arguments),i.targetsMoved=i.targetsImmovable=i.targetsBound=i.targetsDone=0,l=0;o=t.show[l];l++)o.cleanUp(),o.show();for(l=0;o=t.toHide[l];l++)o.cleanUp(),o.hide();if(t.willSort&&i.printSort(!1,t),i.dom.parent.style[e.features.transitionProp]=i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=i.dom.parent.style[e.features.perspectiveProp]=i.dom.parent.style[e.features.perspectiveOriginProp]="",t.willChangeLayout&&(n.removeClass(i.dom.container,t.startContainerClassName),n.addClass(i.dom.container,t.newContainerClassName)),t.toRemove.length){for(l=0;o=i.targets[l];l++)t.toRemove.indexOf(o)>-1&&((r=o.dom.el.previousSibling)&&"#text"===r.nodeName&&(a=o.dom.el.nextSibling)&&"#text"===a.nodeName&&n.removeWhitespace(r),t.willSort||i.dom.parent.removeChild(o.dom.el),i.targets.splice(l,1),o.isInDom=!1,l--);i.origOrder=i.targets}t.willSort&&(i.targets=t.newOrder),i.state=t.newState,i.lastOperation=t,i.dom.targets=i.state.targets,e.events.fire("mixEnd",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixEnd&&i.config.callbacks.onMixEnd.call(i.dom.container,i.state,i),t.hasFailed&&(e.events.fire("mixFail",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixFail&&i.config.callbacks.onMixFail.call(i.dom.container,i.state,i),n.addClass(i.dom.container,n.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed))),"function"==typeof i.userCallback&&i.userCallback.call(i.dom.container,i.state,i),"function"==typeof i.userDeferred.resolve&&i.userDeferred.resolve(i.state),i.userCallback=null,i.userDeferred=null,i.lastClicked=null,i.isToggling=!1,i.isBusy=!1,i.queue.length&&(i.callActions("beforeReadQueueCleanUp",arguments),s=i.queue.shift(),i.userDeferred=s.deferred,i.isToggling=s.isToggling,i.lastClicked=s.triggerElement,s.instruction.command instanceof e.CommandMultimix?i.multimix.apply(i,s.args):i.dataset.apply(i,s.args)),i.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var i=this,o=new e.UserInstruction,r=null,a=-1;for(o.animate=i.config.animation.enable,o.command=new e.CommandMultimix,a=0;a<t.length;a++)null!==(r=t[a])&&("object"==typeof r?n.extend(o.command,r):"boolean"==typeof r?o.animate=r:"function"==typeof r&&(o.callback=r));return!o.command.insert||o.command.insert instanceof e.CommandInsert||(o.command.insert=i.parseInsertArgs([o.command.insert]).command),!o.command.remove||o.command.remove instanceof e.CommandRemove||(o.command.remove=i.parseRemoveArgs([o.command.remove]).command),!o.command.filter||o.command.filter instanceof e.CommandFilter||(o.command.filter=i.parseFilterArgs([o.command.filter]).command),!o.command.sort||o.command.sort instanceof e.CommandSort||(o.command.sort=i.parseSortArgs([o.command.sort]).command),!o.command.changeLayout||o.command.changeLayout instanceof e.CommandChangeLayout||(o.command.changeLayout=i.parseChangeLayoutArgs([o.command.changeLayout]).command),o=i.callFilters("instructionParseMultimixArgs",o,arguments),n.freeze(o),o},parseFilterArgs:function(t){var i=this,o=new e.UserInstruction,r=null,a=-1;for(o.animate=i.config.animation.enable,o.command=new e.CommandFilter,a=0;a<t.length;a++)"string"==typeof(r=t[a])?o.command.selector=r:null===r?o.command.collection=[]:"object"==typeof r&&n.isElement(r,i.dom.document)?o.command.collection=[r]:"object"==typeof r&&void 0!==r.length?o.command.collection=n.arrayFromList(r):"object"==typeof r?n.extend(o.command,r):"boolean"==typeof r?o.animate=r:"function"==typeof r&&(o.callback=r);if(o.command.selector&&o.command.collection)throw new Error(e.messages.errorFilterInvalidArguments());return o=i.callFilters("instructionParseFilterArgs",o,arguments),n.freeze(o),o},parseSortArgs:function(t){var i=this,o=new e.UserInstruction,r=null,a="",s=-1;for(o.animate=i.config.animation.enable,o.command=new e.CommandSort,s=0;s<t.length;s++)if(null!==(r=t[s]))switch(typeof r){case"string":a=r;break;case"object":r.length&&(o.command.collection=n.arrayFromList(r));break;case"boolean":o.animate=r;break;case"function":o.callback=r}return a&&(o.command=i.parseSortString(a,o.command)),o=i.callFilters("instructionParseSortArgs",o,arguments),n.freeze(o),o},parseInsertArgs:function(t){var i=this,o=new e.UserInstruction,r=null,a=-1;for(o.animate=i.config.animation.enable,o.command=new e.CommandInsert,a=0;a<t.length;a++)null!==(r=t[a])&&("number"==typeof r?o.command.index=r:"string"==typeof r&&["before","after"].indexOf(r)>-1?o.command.position=r:"string"==typeof r?o.command.collection=n.arrayFromList(n.createElement(r).childNodes):"object"==typeof r&&n.isElement(r,i.dom.document)?o.command.collection.length?o.command.sibling=r:o.command.collection=[r]:"object"==typeof r&&r.length?o.command.collection.length?o.command.sibling=r[0]:o.command.collection=r:"object"==typeof r&&r.childNodes&&r.childNodes.length?o.command.collection.length?o.command.sibling=r.childNodes[0]:o.command.collection=n.arrayFromList(r.childNodes):"object"==typeof r?n.extend(o.command,r):"boolean"==typeof r?o.animate=r:"function"==typeof r&&(o.callback=r));if(o.command.index&&o.command.sibling)throw new Error(e.messages.errorInsertInvalidArguments());return!o.command.collection.length&&i.config.debug.showWarnings&&console.warn(e.messages.warningInsertNoElements()),o=i.callFilters("instructionParseInsertArgs",o,arguments),n.freeze(o),o},parseRemoveArgs:function(t){var i=this,o=new e.UserInstruction,r=null,a=null,s=-1;for(o.animate=i.config.animation.enable,o.command=new e.CommandRemove,s=0;s<t.length;s++)if(null!==(a=t[s]))switch(typeof a){case"number":i.targets[a]&&(o.command.targets[0]=i.targets[a]);break;case"string":o.command.collection=n.arrayFromList(i.dom.parent.querySelectorAll(a));break;case"object":a&&a.length?o.command.collection=a:n.isElement(a,i.dom.document)?o.command.collection=[a]:n.extend(o.command,a);break;case"boolean":o.animate=a;break;case"function":o.callback=a}if(o.command.collection.length)for(s=0;r=i.targets[s];s++)o.command.collection.indexOf(r.dom.el)>-1&&o.command.targets.push(r);return!o.command.targets.length&&i.config.debug.showWarnings&&console.warn(e.messages.warningRemoveNoElements()),n.freeze(o),o},parseDatasetArgs:function(t){var i=this,o=new e.UserInstruction,r=null,a=-1;for(o.animate=i.config.animation.enable,o.command=new e.CommandDataset,a=0;a<t.length;a++)if(null!==(r=t[a]))switch(typeof r){case"object":Array.isArray(r)||"number"==typeof r.length?o.command.dataset=r:n.extend(o.command,r);break;case"boolean":o.animate=r;break;case"function":o.callback=r}return n.freeze(o),o},parseChangeLayoutArgs:function(t){var i=this,o=new e.UserInstruction,r=null,a=-1;for(o.animate=i.config.animation.enable,o.command=new e.CommandChangeLayout,a=0;a<t.length;a++)if(null!==(r=t[a]))switch(typeof r){case"string":o.command.containerClassName=r;break;case"object":n.extend(o.command,r);break;case"boolean":o.animate=r;break;case"function":o.callback=r}return n.freeze(o),o},queueMix:function(t){var i=this,o=null,r="";return i.callActions("beforeQueueMix",arguments),o=n.defer(e.libraries),i.config.animation.queue&&i.queue.length<i.config.animation.queueLimit?(t.deferred=o,i.queue.push(t),i.config.controls.enable&&(i.isToggling?(i.buildToggleArray(t.instruction.command),r=i.getToggleSelector(),i.updateControls({filter:{selector:r}})):i.updateControls(t.instruction.command))):(i.config.debug.showWarnings&&console.warn(e.messages.warningMultimixInstanceQueueFull()),o.resolve(i.state),e.events.fire("mixBusy",i.dom.container,{state:i.state,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixBusy&&i.config.callbacks.onMixBusy.call(i.dom.container,i.state,i)),i.callFilters("promiseQueueMix",o.promise,arguments)},getDataOperation:function(t){var i=this,o=new e.Operation,r=[];if(o=i.callFilters("operationUnmappedGetDataOperation",o,arguments),i.dom.targets.length&&!(r=i.state.activeDataset||[]).length)throw new Error(e.messages.errorDatasetNotSet());return o.id=n.randomHex(),o.startState=i.state,o.startDataset=r,o.newDataset=t.slice(),i.diffDatasets(o),o.startOrder=i.targets,o.newOrder=o.show,i.config.animation.enable&&(i.getStartMixData(o),i.setInter(o),o.docState=n.getDocumentState(i.dom.document),i.getInterMixData(o),i.setFinal(o),i.getFinalMixData(o),i.parseEffects(),o.hasEffect=i.hasEffect(),i.getTweenData(o)),i.targets=o.show.slice(),o.newState=i.buildState(o),Array.prototype.push.apply(i.targets,o.toRemove),o=i.callFilters("operationMappedGetDataOperation",o,arguments)},diffDatasets:function(t){var i=this,o=[],r=[],a=[],s=null,l=null,c=null,u=null,d=null,f={},h="",p=-1;for(i.callActions("beforeDiffDatasets",arguments),p=0;s=t.newDataset[p];p++){if(void 0===(h=s[i.config.data.uidKey])||h.toString().length<1)throw new TypeError(e.messages.errorDatasetInvalidUidKey({uidKey:i.config.data.uidKey}));if(f[h])throw new Error(e.messages.errorDatasetDuplicateUid({uid:h}));f[h]=!0,(l=i.cache[h])instanceof e.Target?(i.config.data.dirtyCheck&&!n.deepEquals(s,l.data)&&(c=l.render(s),l.data=s,c!==l.dom.el&&(l.isInDom&&(l.unbindEvents(),i.dom.parent.replaceChild(c,l.dom.el)),l.isShown||(c.style.display="none"),l.dom.el=c,l.isInDom&&l.bindEvents())),c=l.dom.el):((l=new e.Target).init(null,i,s),l.hide()),l.isInDom?(d=l.dom.el.nextElementSibling,r.push(h),u&&(u.lastElementChild&&u.appendChild(i.dom.document.createTextNode(" ")),i.insertDatasetFrag(u,l.dom.el,a),u=null)):(u||(u=i.dom.document.createDocumentFragment()),u.lastElementChild&&u.appendChild(i.dom.document.createTextNode(" ")),u.appendChild(l.dom.el),l.isInDom=!0,l.unbindEvents(),l.bindEvents(),l.hide(),t.toShow.push(l),a.push(l)),t.show.push(l)}for(u&&((d=d||i.config.layout.siblingAfter)&&u.appendChild(i.dom.document.createTextNode(" ")),i.insertDatasetFrag(u,d,a)),p=0;s=t.startDataset[p];p++)h=s[i.config.data.uidKey],l=i.cache[h],t.show.indexOf(l)<0?(t.hide.push(l),t.toHide.push(l),t.toRemove.push(l)):o.push(h);n.isEqualArray(o,r)||(t.willSort=!0),i.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,n){var i=this,o=e?Array.from(i.dom.parent.children).indexOf(e):i.targets.length;for(i.dom.parent.insertBefore(t,e);n.length;)i.targets.splice(o,0,n.shift()),o++},willSort:function(t,e){var n=this,i=!1;return i=!!(n.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&n.willSort(t.next,e.next),n.callFilters("resultWillSort",i,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this,e=t.parseFilterArgs(arguments);return t.multimix({filter:e.command},e.animate,e.callback)},toggleOn:function(){var t=this,e=t.parseFilterArgs(arguments),n=e.command.selector,i="";return t.isToggling=!0,t.toggleArray.indexOf(n)<0&&t.toggleArray.push(n),i=t.getToggleSelector(),t.multimix({filter:i},e.animate,e.callback)},toggleOff:function(){var t=this,e=t.parseFilterArgs(arguments),n=e.command.selector,i=t.toggleArray.indexOf(n),o="";return t.isToggling=!0,i>-1&&t.toggleArray.splice(i,1),o=t.getToggleSelector(),t.multimix({filter:o},e.animate,e.callback)},sort:function(){var t=this,e=t.parseSortArgs(arguments);return t.multimix({sort:e.command},e.animate,e.callback)},changeLayout:function(){var t=this,e=t.parseChangeLayoutArgs(arguments);return t.multimix({changeLayout:e.command},e.animate,e.callback)},dataset:function(){var t=this,n=t.parseDatasetArgs(arguments),i=null,o=null,r=!1;return t.callActions("beforeDataset",arguments),t.isBusy?(o=new e.QueueItem,o.args=arguments,o.instruction=n,t.queueMix(o)):(n.callback&&(t.userCallback=n.callback),r=n.animate^t.config.animation.enable?n.animate:t.config.animation.enable,i=t.getDataOperation(n.command.dataset),t.goMix(r,i))},multimix:function(){var t=this,n=null,i=!1,o=null,r=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?(o=new e.QueueItem,o.args=arguments,o.instruction=r,o.triggerElement=t.lastClicked,o.isToggling=t.isToggling,t.queueMix(o)):(n=t.getOperation(r.command),t.config.controls.enable&&(r.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(n.command)),t.queue.length<1&&t.updateControls(n.command)),r.callback&&(t.userCallback=r.callback),i=r.animate^t.config.animation.enable?r.animate:t.config.animation.enable,t.callFilters("operationMultimix",n,arguments),t.goMix(i,n))},getOperation:function(t){var i=this,o=t.sort,r=t.filter,a=t.changeLayout,s=t.remove,l=t.insert,c=new e.Operation;return c=i.callFilters("operationUnmappedGetOperation",c,arguments),c.id=n.randomHex(),c.command=t,c.startState=i.state,c.triggerElement=i.lastClicked,i.isBusy?(i.config.debug.showWarnings&&console.warn(e.messages.warningGetOperationInstanceBusy()),null):(l&&i.insertTargets(l,c),s&&(c.toRemove=s.targets),c.startSort=c.newSort=c.startState.activeSort,c.startOrder=c.newOrder=i.targets,o&&(c.startSort=c.startState.activeSort,c.newSort=o,c.willSort=i.willSort(o,c.startState.activeSort),c.willSort&&i.sortOperation(c)),c.startFilter=c.startState.activeFilter,c.newFilter=r||n.extend(new e.CommandFilter,c.startFilter),"all"===c.newFilter.selector?c.newFilter.selector=i.config.selectors.target:"none"===c.newFilter.selector&&(c.newFilter.selector=""),i.filterOperation(c),c.startContainerClassName=c.startState.activeContainerClassName,a?(c.newContainerClassName=a.containerClassName,c.newContainerClassName!==c.startContainerClassName&&(c.willChangeLayout=!0)):c.newContainerClassName=c.startContainerClassName,i.config.animation.enable&&(i.getStartMixData(c),i.setInter(c),c.docState=n.getDocumentState(i.dom.document),i.getInterMixData(c),i.setFinal(c),i.getFinalMixData(c),i.parseEffects(),c.hasEffect=i.hasEffect(),i.getTweenData(c)),c.willSort&&(i.targets=c.newOrder),c.newState=i.buildState(c),i.callFilters("operationMappedGetOperation",c,arguments))},tween:function(t,e){var n=null,i=null,o=-1,r=-1;for(e=Math.min(e,1),e=Math.max(e,0),r=0;n=t.show[r];r++)i=t.showPosData[r],n.applyTween(i,e);for(r=0;n=t.hide[r];r++)n.isShown&&n.hide(),(o=t.toHide.indexOf(n))>-1&&(i=t.toHidePosData[o],n.isShown||n.show(),n.applyTween(i,e))},insert:function(){var t=this,e=t.parseInsertArgs(arguments);return t.multimix({insert:e.command},e.animate,e.callback)},insertBefore:function(){var t=this,e=t.parseInsertArgs(arguments);return t.insert(e.command.collection,"before",e.command.sibling,e.animate,e.callback)},insertAfter:function(){var t=this,e=t.parseInsertArgs(arguments);return t.insert(e.command.collection,"after",e.command.sibling,e.animate,e.callback)},prepend:function(){var t=this,e=t.parseInsertArgs(arguments);return t.insert(0,e.command.collection,e.animate,e.callback)},append:function(){var t=this,e=t.parseInsertArgs(arguments);return t.insert(t.state.totalTargets,e.command.collection,e.animate,e.callback)},remove:function(){var t=this,e=t.parseRemoveArgs(arguments);return t.multimix({remove:e.command},e.animate,e.callback)},getConfig:function(t){var e=this,i=null;return i=t?n.getProperty(e.config,t):e.config,e.callFilters("valueGetConfig",i,arguments)},configure:function(t){var e=this;e.callActions("beforeConfigure",arguments),n.extend(e.config,t,!0,!0),e.callActions("afterConfigure",arguments)},getState:function(){var t=this,i=null;return i=new e.State,n.extend(i,t.state),n.freeze(i),t.callFilters("stateGetState",i,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,n=null,i="";for(i in t.cache)(n=(e=t.cache[i]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(n,e.dom.el)),e.isShown||(n.style.display="none"),e.dom.el=n,e.isInDom&&e.bindEvents());t.state=t.buildState(t.lastOperation)},destroy:function(t){var n=this,i=null,o=null,r=0;for(n.callActions("beforeDestroy",arguments),r=0;i=n.controls[r];r++)i.removeBinding(n);for(r=0;o=n.targets[r];r++)t&&o.show(),o.unbindEvents();n.dom.container.id.match(/^MixItUp/)&&n.dom.container.removeAttribute("id"),delete e.instances[n.id],n.callActions("afterDestroy",arguments)}}),e.IMoveData=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.IMoveData),e.IMoveData.prototype=Object.create(e.Base.prototype),e.IMoveData.prototype.constructor=e.IMoveData,e.TargetDom=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.TargetDom),e.TargetDom.prototype=Object.create(e.Base.prototype),e.TargetDom.prototype.constructor=e.TargetDom,e.Target=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new e.TargetDom,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.Target),e.Target.prototype=Object.create(e.Base.prototype),n.extend(e.Target.prototype,{constructor:e.Target,init:function(t,n,i){var o=this,r="";if(o.callActions("beforeInit",arguments),o.mixer=n,t||(t=o.render(i)),o.cacheDom(t),o.bindEvents(),"none"!==o.dom.el.style.display&&(o.isShown=!0),i&&n.config.data.uidKey){if(void 0===(r=i[n.config.data.uidKey])||r.toString().length<1)throw new TypeError(e.messages.errorDatasetInvalidUidKey({uidKey:n.config.data.uidKey}));o.id=r,o.data=i,n.cache[r]=o}o.callActions("afterInit",arguments)},render:function(t){var i=this,o=null,r=null,a=null,s="";if(i.callActions("beforeRender",arguments),"function"!=typeof(o=i.callFilters("renderRender",i.mixer.config.render.target,arguments)))throw new TypeError(e.messages.errorDatasetRendererNotSet());return(s=o(t))&&"object"==typeof s&&n.isElement(s)?r=s:"string"==typeof s&&((a=document.createElement("div")).innerHTML=s,r=a.firstElementChild),i.callFilters("elRender",r,arguments)},cacheDom:function(t){var e=this;e.callActions("beforeCacheDom",arguments),e.dom.el=t,e.callActions("afterCacheDom",arguments)},getSortString:function(t){var e=this,n=e.dom.el.getAttribute("data-"+t)||"";e.callActions("beforeGetSortString",arguments),n=isNaN(1*n)?n.toLowerCase():1*n,e.sortString=n,e.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,n){var i=this,o="",r=null,a=t.posIn,s=[],l=new e.StyleData,c=-1;for(i.callActions("beforeApplyTween",arguments),l.x=a.x,l.y=a.y,0===n?i.hide():i.isShown||i.show(),c=0;o=e.features.TWEENABLE[c];c++)if(r=t.tweenData[o],"x"===o){if(!r)continue;l.x=a.x+r*n}else if("y"===o){if(!r)continue;l.y=a.y+r*n}else if(r instanceof e.TransformData){if(!r.value)continue;l[o].value=a[o].value+r.value*n,l[o].unit=r.unit,s.push(o+"("+l[o].value+r.unit+")")}else{if(!r)continue;l[o]=a[o]+r*n,i.dom.el.style[o]=l[o]}(l.x||l.y)&&s.unshift("translate("+l.x+"px, "+l.y+"px)"),s.length&&(i.dom.el.style[e.features.transformProp]=s.join(" ")),i.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var n=this,i=t.posIn,o=1!==n.mixer.effectsIn.opacity,r=[];n.callActions("beforeApplyStylesIn",arguments),r.push("translate("+i.x+"px, "+i.y+"px)"),n.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(n.dom.el.style.width=i.width+"px",n.dom.el.style.height=i.height+"px"),n.dom.el.style.marginRight=i.marginRight+"px",n.dom.el.style.marginBottom=i.marginBottom+"px"),o&&(n.dom.el.style.opacity=i.opacity),"show"===t.statusChange&&(r=r.concat(n.mixer.transformIn)),n.dom.el.style[e.features.transformProp]=r.join(" "),n.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var n=this,i=[],o=[],r=n.mixer.config.animation.animateResizeTargets,a=void 0!==n.mixer.effectsIn.opacity;if(n.callActions("beforeApplyStylesOut",arguments),i.push(n.writeTransitionRule(e.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&i.push(n.writeTransitionRule("opacity",t.staggerIndex,t.duration)),r&&(i.push(n.writeTransitionRule("width",t.staggerIndex,t.duration)),i.push(n.writeTransitionRule("height",t.staggerIndex,t.duration)),i.push(n.writeTransitionRule("margin",t.staggerIndex,t.duration))),!t.callback)return n.mixer.targetsImmovable++,void(n.mixer.targetsMoved===n.mixer.targetsImmovable&&n.mixer.cleanUp(t.operation));switch(n.operation=t.operation,n.callback=t.callback,!n.isExcluded&&n.mixer.targetsBound++,n.isBound=!0,n.applyTransition(i),r&&t.posOut.width>0&&t.posOut.height>0&&(n.dom.el.style.width=t.posOut.width+"px",n.dom.el.style.height=t.posOut.height+"px",n.dom.el.style.marginRight=t.posOut.marginRight+"px",n.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),n.mixer.config.animation.nudge||"hide"!==t.statusChange||o.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":a&&(n.dom.el.style.opacity=n.mixer.effectsOut.opacity),o=o.concat(n.mixer.transformOut);break;case"show":a&&(n.dom.el.style.opacity=1)}(n.mixer.config.animation.nudge||!n.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&o.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),n.dom.el.style[e.features.transformProp]=o.join(" "),n.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(t,e,n){var i=this,o=i.getDelay(e),r="";return r=t+" "+(n>0?n:i.mixer.config.animation.duration)+"ms "+o+"ms "+("opacity"===t?"linear":i.mixer.config.animation.easing),i.callFilters("ruleWriteTransitionRule",r,arguments)},getDelay:function(t){var e=this,n=-1;return"function"==typeof e.mixer.config.animation.staggerSequence&&(t=e.mixer.config.animation.staggerSequence.call(e,t,e.state)),n=e.mixer.staggerDuration?t*e.mixer.staggerDuration:0,e.callFilters("delayGetDelay",n,arguments)},applyTransition:function(t){var n=this,i=t.join(", ");n.callActions("beforeApplyTransition",arguments),n.dom.el.style[e.features.transitionProp]=i,n.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,n=t.propertyName,i=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(n.indexOf("transform")>-1||n.indexOf("opacity")>-1||i&&n.indexOf("height")>-1||i&&n.indexOf("width")>-1||i&&n.indexOf("margin")>-1)&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){var e=this;switch(e.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":e.handleTransitionEnd(t)}e.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),n.off(t.dom.el,"webkitTransitionEnd",t.handler),n.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t=this,i="";t.callActions("beforeBindEvents",arguments),i="webkit"===e.features.transitionPrefix?"webkitTransitionEnd":"transitionend",t.handler=function(e){return t.eventBus(e)},n.on(t.dom.el,i,t.handler),t.callActions("afterBindEvents",arguments)},getPosData:function(n){var i=this,o={},r=null,a=new e.StyleData;return i.callActions("beforeGetPosData",arguments),a.x=i.dom.el.offsetLeft,a.y=i.dom.el.offsetTop,(i.mixer.config.animation.animateResizeTargets||n)&&(r=i.dom.el.getBoundingClientRect(),a.top=r.top,a.right=r.right,a.bottom=r.bottom,a.left=r.left,a.width=r.width,a.height=r.height),i.mixer.config.animation.animateResizeTargets&&(o=t.getComputedStyle(i.dom.el),a.marginBottom=parseFloat(o.marginBottom),a.marginRight=parseFloat(o.marginRight)),i.callFilters("posDataGetPosData",a,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[e.features.transformProp]="",t.dom.el.style[e.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),e.Collection=function(t){var e=null,i=-1;for(this.callActions("beforeConstruct"),i=0;e=t[i];i++)this[i]=e;this.length=t.length,this.callActions("afterConstruct"),n.freeze(this)},e.BaseStatic.call(e.Collection),e.Collection.prototype=Object.create(e.Base.prototype),n.extend(e.Collection.prototype,{constructor:e.Collection,mixitup:function(t){var i=this,o=null,r=Array.prototype.slice.call(arguments),a=[],s=-1;for(this.callActions("beforeMixitup"),r.shift(),s=0;o=i[s];s++)a.push(o[t].apply(o,r));return i.callFilters("promiseMixitup",n.all(a,e.libraries),arguments)}}),e.Operation=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.Operation),e.Operation.prototype=Object.create(e.Base.prototype),e.Operation.prototype.constructor=e.Operation,e.State=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.State),e.State.prototype=Object.create(e.Base.prototype),e.State.prototype.constructor=e.State,e.UserInstruction=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),n.seal(this)},e.BaseStatic.call(e.UserInstruction),e.UserInstruction.prototype=Object.create(e.Base.prototype),e.UserInstruction.prototype.constructor=e.UserInstruction,e.Messages=function(){e.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),n.seal(this)},e.BaseStatic.call(e.Messages),e.Messages.prototype=Object.create(e.Base.prototype),e.Messages.prototype.constructor=e.Messages,e.Messages.prototype.compileTemplates=function(){var t="",e="";for(t in this)"string"==typeof(e=this[t])&&(this[n.camelCase(t)]=n.template(e))},e.messages=new e.Messages,e.Facade=function(t){e.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),n.freeze(this),n.seal(this)},e.BaseStatic.call(e.Facade),e.Facade.prototype=Object.create(e.Base.prototype),e.Facade.prototype.constructor=e.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=e:"function"==typeof define&&define.amd?define(function(){return e}):void 0!==t.mixitup&&"function"==typeof t.mixitup||(t.mixitup=e),e.BaseStatic.call(e.constructor),e.NAME="mixitup",e.CORE_VERSION="3.2.2"}(window),$(".header-slider").coreSlider({sliderSelector:".header-slider_list",viewportSelector:".header-slider_viewport",itemSelector:".header-slider_item",controlNavSelector:".header-slider_control-nav",controlNavItemSelector:"header-slider_control-nav-item",controlNavEnabled:!0}),$(".feature-slider").coreSlider({sliderSelector:".feature-slider_list",viewportSelector:".feature-slider_viewport",itemSelector:".feature-slider_item",controlNavSelector:".feature-slider_control-nav",controlNavItemSelector:"feature-slider_control-nav-item",activeClass:"feature-slider_control-nav-item_active",controlNavEnabled:!0});var getItems,widthImg;navImg(),$(window).on("load resize",function(){widthImg=$(".feature-slider_control-nav-item").width(),$(".feature-slider_control-nav-item").css("height",widthImg)}),$(".main").css("transition","margin .5s"),$(document).ready(function(){var t=mixitup(".portfolio__gallery",{animation:{animateResizeTargets:!0,effectsIn:"fade translateY(-100%)",effectsOut:"fade translateY(100%)",reverseOut:!0,nudge:!1},selectors:{target:".portfolio__item",control:".portfolio__tag"},classNames:{block:"",elementFilter:"",modifierActive:"button_state_active"}});$(".portfolio__button").on("click",function(e){!function(){var t=document.getElementsByClassName("button_state_active");getActiveCategory=$(t).attr("data-filter")}(),t.destroy()})});var getActiveCategory;$(document).on("click",'[data-toggle="lightbox"]',function(t){t.preventDefault(),$(this).ekkoLightbox()}),function(t){"use strict";var e,n,i,o,r,a=0;e=function(t,e){return"function"==typeof t?t.call(e):t},n=function(n){var o=t(this),a=o.data("loadmore-options"),s=o.children("span.text"),l=a.useOffset?i(o,a):o.data("loadmore-page"),c=a.url,u={};return!(o.hasClass("loading")||n<=l)&&(o.addClass("loading"),s.text(e(a.loadingText,s[0])),n-l>1&&a.pageStartParam&&(u[a.pageStartParam]=l+1+a.baseOffset,!1!==a.maxPageCount&&a.maxPageCount*(a.useOffset?a.rowsPerPage:1)<n-l&&(n=l+a.maxPageCount)),a.pageParam&&(u[a.pageParam]=n+a.baseOffset),a.processUrl&&(u=(c=a.processUrl(c,u)).params||{},c=c.url||c),t.get(c,u).fail(function(){}).done(function(i){if(a.useOffset||l===o.data("loadmore-page")){var c,u,d={};a.useOffset||o.data("loadmore-page",n),o.removeClass("loading"),s.text(e(a.text,s[0])),r&&a.useHistoryAPI&&(d[o.attr("id")]=n,window.history.replaceState(jQuery.extend(!0,window.history.state,{loadmore:d}),document.title)),c=t(i).filter("*"),a.filterResult&&(c=c.find(a.filterResult).add(c.filter(a.filterResult))),c=t("<div>").append(c),u=(a.itemSelector?t(a.itemSelector,c):c).length,a.useExistingButton?c.children().appendTo(o.data("loadmore-container")):c.children().insertBefore(o),!1!==a.rowsPerPage&&u<(a.useOffset?1:a.rowsPerPage)*(n-l)&&o.trigger("loadmore:last").remove(),a.complete&&!1===a.complete.call(c)&&o.parent().length&&o.trigger("loadmore:last").remove(),mixitup(".portfolio__gallery",{animation:{animateResizeTargets:!0,effectsIn:"fade translateY(-100%)",effectsOut:"fade translateY(100%)",reverseOut:!0,nudge:!1},selectors:{target:".portfolio__item",control:".portfolio__tag"},classNames:{block:"",elementFilter:"",modifierActive:"button_state_active"}}).filter(getActiveCategory)}}),!1)},i=function(e,n){return(n.itemSelector?t(n.itemSelector,e.data("loadmore-container")):e.siblings()).length},o=function(e){var o,r=t(this),a=r.data("loadmore-options");return o=a.useOffset?i(r,a)+a.rowsPerPage:r.data("loadmore-page")+1,n.call(this,o)},t.fn.loadmore=function(i,s){return"object"==typeof i?s=t.extend({},t.fn.loadmore.defaults,i):(s=t.extend({},t.fn.loadmore.defaults,s)).url=i,this.each(function(){var i,l,c,u,d,f=0;if(u=(s.itemSelector?t(s.itemSelector,this):t(this).children()).length,s.id)for(c=s.id;t("#"+c).length;)f+=1,c=s.id+"-"+f;else c="loadmore-"+(a+=1);if(s.useExistingButton?(i=t(s.useExistingButton),s.text=i.text(),(d=s.interpretUrl?s.interpretUrl(i.get(0),u,s):void 0)&&(s.baseOffset=d)):(i=t("<a />",{id:c,class:s.className,href:"#"}),(l=t("<span />",{class:"text"})).appendTo(i).text(e(s.text,l[0]))),i.data("loadmore-options",s),i.data("loadmore-container",this),s.useOffset||i.data("loadmore-page",s.page),!s.useExistingButton){if(!1!==s.rowsPerPage&&u<s.rowsPerPage)return;i.appendTo(this)}i.click(o),r&&s.useHistoryAPI&&window.history.state&&window.history.state.loadmore&&window.history.state.loadmore[c]&&n.call(i[0],window.history.state.loadmore[c])}),this},t.fn.loadmore.defaults={id:null,className:"more",useExistingButton:!1,text:"More",loadingText:"Loading",page:0,rowsPerPage:!1,maxPageCount:!1,pageParam:"page",pageStartParam:"start",filterResult:"*",complete:!1,useHistoryAPI:!0,useOffset:!1,baseOffset:0,processUrl:!1,interpretUrl:function(t,e,n){var i;return t.search.substr(1).split("&").some(function(t){return(t=t.split("="))[0]===n.pageParam?(i=parseInt(t[1])+n.baseOffset,!0):t[0]===n.pageStartParam?(i=parseInt(t[1])+n.baseOffset-e,!0):void 0}),i}},(r=window.history&&window.history.pushState&&window.history.replaceState&&!navigator.userAgent.match(/(iPod|iPhone|iPad|Safari\/|Chrome\/|WebApps\/.+CFNetwork)/))&&(t.inArray("state",t.event.props)<0&&t.event.props.push("state"),t(window).on("popstate",function(e){var i,o,r=(e.state||{}).loadmore||{};for(i in r)r.hasOwnProperty(i)&&(o=t("#"+i)).length&&n.call(o[0],r[i])})),t.loadmore={supportsHistory:r,removeHistoryState:function(t){if(r&&window.history.state&&window.history.state.loadmore&&window.history.state.loadmore[t]){var e=window.history.state;delete e.loadmore[t],window.history.replaceState(e,document.title)}}}}(jQuery),$(".portfolio__gallery").loadmore("/portfolio/dsstudio/morePortfolio.html",{id:null,useExistingButton:".portfolio__button",text:"More",loadingText:"Loading",page:0,rowsPerPage:4,maxPageCount:!1,pageParam:"page",pageStartParam:"start",filterResult:"",complete:!1,useHistoryAPI:!0,useOffset:!1,baseOffset:0,processUrl:!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
